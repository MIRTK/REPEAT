#!/bin/bash

## Generate parameters for MIRTK 'register' command
## using symmetric energy formulation and SVFFD model
regid="$(basename "${BASH_SOURCE/.gen}")"
parcsv="$(dirname "$BASH_SOURCE")/$regid.csv"

# attention: must be in single quotes; each column entry must be '$name'
cfgrow='$cfgid,$usemsk,$usepad,$roi,$interp,$optim,$linesearch,$divini,$srcgrd,$ffdgrd,$passdof,$conjtot,$levels,$iters,$steps,$rejects,$lastn,$epsilon,$sim,$bins,$padbins,$window,$ds,$be,$tp,$vp,$jaceps,$gamma,$im,$imsteps,$maxsv,$nbch,$uselie'

# initial/constant parameter values
set_defaults()
{
  usemsk=true
  usepad=true
  roi='Union'
  interp='Linear'
  optim='ConjugateGradientDescent'
  linesearch='Adaptive'
  divini=false
  srcgrd=true
  ffdgrd='Analytic'
  passdof=false
  conjtot=true
  levels=4
  iters=100
  steps=20
  rejects=2
  lastn=10
  epsilon=0.0001
  sim='NMI'
  bins=64
  padbins=false
  window=5
  ds=2.5
  be=0
  tp=0
  vp=0
  jaceps=0.1
  gamma=0.5
  # SVFFD parameters
  im='SS'
  imsteps=64
  maxsv=0
  nbch=0
  uselie=false
}

# auxiliary function to append row with parameter values
append_row()
{
  let i++
  local cfgid=$(printf %04d $i)
  eval "echo \"$cfgrow\"" >> "$parcsv"
}

# write header and initialize row counter
echo "${cfgrow//$}" > "$parcsv"
i=0

# ------------------------------------------------------------------------------
# 1) determine bending energy weight
set_defaults
for be in 0.1 0.05 0.01 0.005 0.001 0.0005 0.0001; do
  append_row
done

# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
#exit 0

be_vals=(0.0005 0.001 0.005)
be_best=0.001

# ------------------------------------------------------------------------------
# 2) explore integration schemes
#
# Integration method       = <im>
# No. of integration steps = <imsteps>
# Maximum scaled velocity  = <maxsv>
# No. of BCH terms         = <nbch>
# Use Lie derivative       = <uselie>
set_defaults
be=$be_best
for im in 'RKE1' 'SS' 'FastSS'; do
  if [ $im = 'RKE1' ]; then
    imsteps_opts=(8 16)
    nbch_opts=(0)
  else
    imsteps_opts=(8 16 32 64)
    nbch_opts=(0 2 3 4 5)
  fi
  for nbch in ${nbch_opts[@]}; do
    if [ $nbch -gt 2 ]; then
      uselie_opts=(false true)
    else
      uselie_opts=(false)
    fi
    for uselie in ${uselie_opts[@]}; do
      for imsteps in ${imsteps_opts[@]}; do
        append_row
      done
    done
  done
done

# ------------------------------------------------------------------------------
# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
#exit 0

set_new_defaults()
{
  set_defaults
  im='SS'
  imsteps=32
  maxsv=0
  nbch=2
  be=$be_best
}

# ------------------------------------------------------------------------------
# Add penalties for non-positive (and large) Jacobian determinant values

set_new_defaults

# 4a) using topology preservation penalty for det(J) < gamma
vp=0
for be in ${be_vals[@]}; do
  for tp in 0.00001 0.0001 0.001 0.01 0.1 0.5 1; do
    append_row
  done
done

# 4b) using volume preservation penalty, i.e., sq(log(det(J)))
tp=0
for be in ${be_vals[@]}; do
  for vp in 0.00001 0.0001 0.001 0.01 0.1 0.5 1; do
    append_row
  done
done

# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
#exit 0

vp_vals=(0.0001 0.001 0.01)
tp_vals=(0.0001 0.001 0.01)
vp_best=0.001
tp_best=0.001

# 4c) using both topology and volume preservation penalties
for be in ${be_vals[@]}; do
  for vp in ${vp_vals[@]}; do
    for tp in ${tp_vals[@]}; do
      append_row
    done
  done
done

