#!/bin/bash

## Generate command-line arguments for symmetric LNCC log-domain Demons
regid="$(basename "${BASH_SOURCE/.gen}")"
parcsv="$(dirname "$BASH_SOURCE")/$regid.csv"

# attention: must be in single quotes; each column entry must be '$name'
cfgrow='$cfgid,$usemsk,$B,$a,$g,$R,$r,$S,$b,$x,$l,$C,$u,$d'

# initial/constant parameter values
set_defaults()
{
  usemsk=true
  B=true        # boundary checking: false) use -B flag to disable it
  a='30x99x10'  # iterations per level, coarse to fine
  g=0           # type of gradient: 0) symmetrized, 1) fixed, 2) moving, 3) mapped moving
  R=1           # type of regularization: 0) Gaussian convolution, 1) HE + BE
  r=2           # similarity (update rule): 0) asymmetric SSD, 1) symmetric SSD, 2) symmetric LNCC
  S=0.15        # trade-off between similarity and regularization: 0 (irreg) < S <= 1 (smooth)
  b=1           # bending  energy (BE) weight (argument is multiplied by 1e-6)
  x=0           # Harmonic energy (HE) weight (argument is multiplied by 1e-3)
  l=0           # maximum step length [mm]
  C=3           # standard deviation of Gaussian smoothing of similarity [mm]
  u=0           # standard deviation of Gaussian smoothing of update field [mm]
  d=1.5         # standard deviation of Gaussian smoothing of velocity field [mm]
}

# auxiliary function to append row with parameter values
append_row()
{
  let i++
  local cfgid=$(printf %04d $i)
  eval "echo \"$cfgrow\"" >> "$parcsv"
}

# write header and initialize row counter
echo "${cfgrow//$}" > "$parcsv"
i=0

# ------------------------------------------------------------------------------
# 1a) explore different amounts of regularization using Gaussian convolution
set_defaults

R=0
for S in 0.05 0.15 0.25; do
  for d in 0 0.5 1 1.5 2; do
    for u in 0 0.5 1 1.5 2; do
      append_row
    done
  done
done

# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
#exit 0

best_d=1
best_u=0


# ------------------------------------------------------------------------------
# 1b) explore different amounts of regularization using BE + HE
set_defaults
d=0.5
u=0

R=1
for S in 0.05 0.15 0.25; do
  for b in 0 0.25 0.5 0.75 1; do
    for x in 0 0.25 0.5 0.75 1; do
      append_row
    done
  done
done

# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
#exit 0

best_b=1
best_x=1

best_S=0.25


# ------------------------------------------------------------------------------
# after previous tests, choose new default settings
set_new_defaults()
{
  set_defaults
  S=$best_S
  d=$best_d
  u=$best_u
  b=$best_b
  x=$best_x
}

# ------------------------------------------------------------------------------
# 2) try different number of iterations on finer levels
set_new_defaults

# Ou et al., "Comparative evaluation of registration algorithms in different brain databases
# with varying difficulty: Results and insights", IEEE TMI 33(10), 2039â€“2065, 2014.
a='30x20x10'
for R in 0 1; do
  append_row
done

for R in 0 1; do
  for steps in 20 30 40 50; do
    a="30x99x$steps"
    append_row
  done
done

# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
#exit 0

for R in 0 1; do
  for steps in 10 20 30 40 50 60 70 80 90 100; do
    a="30x40x$steps"
    append_row
  done
done

# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
#exit 0

best_a='30x40x50'


# ------------------------------------------------------------------------------
# 3) try disabling boundary checking
set_new_defaults
a=$best_a
B=false

for R in 0 1; do
  append_row
done

# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
exit 0

best_B=true # TODO


# ------------------------------------------------------------------------------
# 4) try different LNCC Gaussian window sizes
set_new_defaults
B=$best_B
a=$best_a

for R in 0 1; do
  for C in 2 3 4 5 6 7 8 9 10; do
    append_row
  done
done

# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
exit 0

best_C=3 # TODO
best_R=0 # TODO


# ------------------------------------------------------------------------------
# after previous tests, choose new default settings
set_new_defaults()
{
  set_defaults
  R=$best_R
  B=$best_B
  S=$best_S
  C=$best_C
  d=$best_d
  u=$best_u
  b=$best_b
  x=$best_x
  a=$best_a
}


# ------------------------------------------------------------------------------
# 5a) fine tuning: try few different regularization parameters with new LNCC window size

set_new_defaults
# TODO


# ------------------------------------------------------------------------------
# 5b) fine tuning: try restricting maximum step length

set_new_defaults
# TODO

