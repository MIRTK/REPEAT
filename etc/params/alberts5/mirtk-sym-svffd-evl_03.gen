#!/bin/bash

## Generate parameters for MIRTK 'register' command
## using symmetric energy formulation and SVFFD model
regid="$(basename "${BASH_SOURCE/.gen}")"
parcsv="$(dirname "$BASH_SOURCE")/$regid.csv"

# attention: must be in single quotes; each column entry must be '$name'
cfgrow='$cfgid,$usemsk,$usepad,$roi,$interp,$optim,$linesearch,$divini,$srcgrd,$ffdgrd,$passdof,$conjtot,$levels,$iters,$steps,$rejects,$lastn,$epsilon,$sim,$bins,$padbins,$window,$ds,$be,$le,$lj,$nj,$jaceps,$gamma,$im,$imsteps,$maxsv,$nbch,$uselie'

# initial/constant parameter values
set_defaults()
{
  usemsk=true
  usepad=true
  roi='Union'
  interp='Linear'
  optim='ConjugateGradientDescent'
  linesearch='Adaptive'
  divini=false
  srcgrd=false
  ffdgrd='Convolution'
  passdof=false
  conjtot=true
  levels=4
  iters=200
  steps=12
  rejects=12
  lastn=0
  epsilon=0.00001
  sim='NMI'
  bins=64
  padbins=false
  window=5
  ds=2.5
  be=0.008
  le=0.01
  lj=0
  nj=0
  jaceps=0.1
  gamma=0.5
  # SVFFD parameters
  im='SS'
  imsteps=32
  maxsv=0
  nbch=0
  uselie=false
}

# auxiliary function to append row with parameter values
append_row()
{
  let i++
  local cfgid=$(printf %04d $i)
  eval "echo \"$cfgrow\"" >> "$parcsv"
}

# write header and initialize row counter
echo "${cfgrow//$}" > "$parcsv"
i=0

# ------------------------------------------------------------------------------
# 1) determine optimal weights of penalty terms

set_defaults

# 1a) bending energy
for be in 0 0.001 0.005 0.006 0.007 0.008 0.009 0.01 0.02 0.03 0.04 0.05; do
  append_row
done

# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
exit 0

be_vals=(0.001 0.002 0.005)

# 1b) LogJac penalty
for be in ${be_vals[@]}; do
  for vp in 0.00001 0.0001 0.0005 0.001 0.0025 0.005 0.01 0.05; do
    append_row
  done
done

# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
#exit 0

vp_vals=(0.0001 0.001)

# 1c) NegJac penalty
vp=0
for be in ${be_vals[@]}; do
  for tp in 0.00001 0.0001 0.0005 0.001 0.005 0.01 0.05; do
    append_row
  done
done

# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
#exit 0

tp_vals=(0.0001 0.001 0.01)

for be in ${be_vals[@]}; do
  for vp in ${vp_vals[@]}; do
    for tp in ${tp_vals[@]}; do
      append_row
    done
  done
done

# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
exit 0

be_best=0.005
tp_best=0.0001
vp_best=0.001

# ------------------------------------------------------------------------------
# 1) compare different image dissimilarity gradient calculations
set_defaults
be=$be_best
tp=$tp_best
vp=$vp_best
maxsv=0
for im in 'FastSS' 'SS' 'RKE1'; do
  for ffdgrd in 'Analytic' 'Convolution' 'DMFFD'; do
    for nbch in 0 2 3 5; do
      for imsteps in 1 2 4 8 16 32; do
        append_row
      done
    done
  done
done
