#!/bin/bash

## Generate command-line arguments for NiftyReg 'reg_f3d' command (version >= 1.5)
##
## Revision 26ac2c4 of NiftyReg with the following fix of reg_resampleGradient function:
##
## // Reorientation matrix is assessed in order to remove the rigid component
## -    mat33 reorient=nifti_mat33_inverse(nifti_mat33_polar(reg_mat44_to_mat33(&deformationField->sto_xyz)));
## +    mat44 *def_voxel_to_mm = &deformationField->qto_xyz;
## +    if(deformationField->sform_code>0)
## +    {
## +        def_voxel_to_mm = &deformationField->sto_xyz;
## +    }
## +    mat33 reorient=nifti_mat33_inverse(nifti_mat33_polar(reg_mat44_to_mat33(def_voxel_to_mm)));
regid="$(basename "${BASH_SOURCE/.gen}")"
parcsv="$(dirname "$BASH_SOURCE")/$regid.csv"

# attention: must be in single quotes; each column entry must be '$name'
cfgrow='$cfgid,$vel,$gce,$sim,$bins,$levels,$maxit,$ds,$be,$jl,$le'
vel=true  # constant

# initial/constant parameter values
set_defaults()
{
  gce=true  # true: SS-based gradient, false: zeroth order BCH approximation
  sim='NMI'
  bins=64
  levels=3
  maxit=300
  ds=2.5
  be=0.005
  jl=0 # includes iterative folding correction at each step
  le=0
}

# Modat et al., "Parametric non-rigid registration using a stationary velocity field", MMBIA 2012, 145â€“150.
set_modat2012_parameters()
{
  gce=true
  ds=2.5
  be=0.001
  jl=0.1
  le=0.1
  l2=0
}

# auxiliary function to append row with parameter values
append_row()
{
  let i++
  local cfgid=$(printf %04d $i)
  eval "echo \"$cfgrow\"" >> "$parcsv"
}

# write header and initialize row counter
echo "${cfgrow//$}" > "$parcsv"
i=0

# ------------------------------------------------------------------------------
# 1. exploration of penalty weights

# 1a) bending energy weight
set_defaults
jl=0
le=0
for be in 0 0.0001 0.0005 0.001 0.005 0.01 0.05; do
  append_row
done

# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
#exit 0

be_vals=(0.0001 0.0005 0.001)

# 1b) add Jacobian based penalty weight
set_defaults
le=0
for be in ${be_vals[@]}; do
  for jl in 0.00001 0.0001 0.001 0.01 0.1; do
    append_row
  done
done

# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
#exit 0

jl_vals=(0 0.00001)

# 1c) add squared divergence of SVF penalty weight
set_defaults
for be in ${be_vals[@]}; do
  for jl in ${jl_vals[@]}; do
    for le in 0.0001 0.0005 0.001 0.005 0.01 0.05 0.1; do
      append_row
    done
  done
done

# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
exit 0

le_vals=(0)

# ------------------------------------------------------------------------------
# 2. exploration of max. number of iterations, no. of levels
set_defaults
default_levels=$levels
default_maxit=$maxit
for be in ${be_vals[@]}; do
  for jl in ${jl_vals[@]}; do
    for le in ${le_vals[@]}; do
      for levels in 3 4; do
        for maxit in 300 500 750 1000; do
          if [ $levels -ne $default_levels -o $maxit -ne $default_maxit ]; then
            append_row
          fi
        done
      done
    done
  done
done

# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
exit 0

for be in 0.0005; do
  for jl in 0 0.0001; do
    for le in 0; do
      for levels in 3 4; do
        for maxit in 300 500 750 1000; do
          append_row
        done
      done
    done
  done
done
