#!/bin/bash

## Generate parameters for MIRTK 'register' command
## using asymmetric energy formulation and FFD model
regid="$(basename "${BASH_SOURCE/.gen}")"
parcsv="$(dirname "$BASH_SOURCE")/$regid.csv"

# attention: must be in single quotes; each column entry must be '$name'
cfgrow='$cfgid,$usemsk,$usepad,$roi,$interp,$optim,$linesearch,$divini,$srcgrd,$ffdgrd,$passdof,$conjtot,$levels,$iters,$steps,$rejects,$lastn,$epsilon,$sim,$bins,$padbins,$window,$ds,$be,$le,$le_mu,$le_lambda,$le_rot,$lj,$lj_eps,$nj,$nj_eps,$nj_gamma'

# default parameter values based on pairwise ALBERTs tgt=01, src=02 registrations
# using schuhschuh/MIRTK (GitHub) develop branch revision 8509812
set_defaults()
{
  usemsk=true
  usepad=true
  roi='Union'
  interp='Fast Linear'
  optim='ConjugateGradientDescent'
  linesearch='Adaptive'
  divini=false
  srcgrd=false
  ffdgrd='DMFFD'
  passdof=false
  conjtot=true
  levels=3
  iters=300
  steps=12
  rejects=12
  lastn=0
  epsilon=0
  sim='NMI'
  bins=64
  padbins=false
  window=5
  ds=2.5
  be=0
  le=0
  le_mu=1
  le_lambda=1.5
  le_rot=true
  lj=0
  lj_eps=0.005
  nj=0
  nj_eps=0.01
  nj_gamma=0.5
}

# auxiliary function to append row with parameter values
append_row()
{
  let i++
  local cfgid=$(printf %04d $i)
  eval "echo \"$cfgrow\"" >> "$parcsv"
}

# write header and initialize row counter
echo "${cfgrow//$}" > "$parcsv"
i=0

# ------------------------------------------------------------------------------
# 1) explore weights of penalty terms individually, only one constraint at a time

# initial value ranges are based on pairwise ALBERTs tgt=01, src=02 registrations
be_vals=(0.0005 0.0006 0.0007 0.0008 0.0009 0.0010 0.0020 0.0030 0.0040 0.0050)
le_vals=(0.0005 0.0006 0.0007 0.0008 0.0009 0.0010 0.0020 0.0030 0.0040 0.0050)
lj_vals=(0.0005 0.0006 0.0007 0.0008 0.0009 0.0010 0.0020 0.0030 0.0040 0.0050)
nj_vals=(0.0010 0.0020 0.0030 0.0040 0.0050 0.0060 0.0070 0.0080 0.0090 0.0100 0.0200)

# 1a) no constraints
set_defaults
for ffdgrd in 'Analytic' 'Convolution' 'DMFFD'; do
  append_row
done

# 1b) bending energy
set_defaults
for ffdgrd in 'Analytic' 'Convolution' 'DMFFD'; do
  for be in ${be_vals[@]}; do
    append_row
  done
done

# 1c) elastic energy with lambda=0
set_defaults
le_lambda=0
for ffdgrd in 'Analytic' 'Convolution' 'DMFFD'; do
  for le in ${le_vals[@]}; do
    append_row
  done
done

# 1d) elastic energy with lambda>0
set_defaults
for ffdgrd in 'Analytic' 'Convolution' 'DMFFD'; do
  for le in ${le_vals[@]}; do
    for le_lambda in 0.5 1.0 1.5; do
      append_row
    done
  done
done

# 1e) LogJac penalty
set_defaults
for ffdgrd in 'Analytic' 'Convolution' 'DMFFD'; do
  for lj_eps in 0.0001 0.0010 0.0050 0.0100 0.1000; do
    for lj in ${lj_vals[@]}; do
      append_row
    done
  done
done

# 1f) NegJac penalty
set_defaults
for ffdgrd in 'Analytic' 'Convolution' 'DMFFD'; do
  for nj_eps in 0.01 0.05 0.10; do
    for nj in ${nj_vals[@]}; do
      append_row
    done
  done
done


# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
#exit 0

# 1g) try some even smaller bending energy weight values
set_defaults
for ffdgrd in 'Analytic' 'Convolution' 'DMFFD'; do
  for be in 0.00001 0.00005 0.0001 0.0002 0.0003 0.0004; do
    append_row
  done
done

# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
#exit 0

# ------------------------------------------------------------------------------
# 2) combine regularization terms

set_new_defaults()
{
  set_defaults
  ffdgrd='Convolution'
  le_lambda=1
  lj_eps=0.005
  nj_eps=0.1
}

be_vals=(0.0001 0.0003 0.0005)
le_vals=(0.0008 0.0010)
lj_vals=(0.0000 0.0005 0.0010 0.0030)
nj_vals=(0.0000 0.0030 0.0050 0.0080)

set_new_defaults
for be in ${be_vals[@]}; do
  for le in ${le_vals[@]}; do
    for lj in ${lj_vals[@]}; do
      for nj in ${nj_vals[@]}; do
        append_row
      done
    done
  done
done

# Comment following line when previous tests are done, and the results have been analyzed.
# Adjust parameters for following tests to more narrow ranges found to perform well.
exit 0

