# ----------------------------------------------------------------------------------------------------------------------
# Auxiliary software tools
software {
  care       = care         # Local path of "care" executable used to pack binary files (http://reproducible.io/#downloads)
  care-tmp   = /tmp         # Temporary directory for creating archive files
  tar        = /bin/tar     # Local path of "tar" executable used to create archive files
  repository = Bin          # Local directory containing pre-packed CARE archives
  shared     = true         # Whether software installations are shared between all compute nodes
                            # true:  Absolute paths of binaries are used to access the same binary
                            #        files on a shared network drive. If command names are given only
                            #        the software is expected to be available in the PATH on each node.
                            # false: Binary files used by a remote task are packed using CARE. The resulting
                            #        (self-extracting) archive is copied to the remote and extracted into
                            #        the working directory of the task.
}
irtk {
  dir        = Bin/IRTK     # Directory where the binary IRTK executables are located
  threads    = 1            # Maximum number of threads an IRTK binary may spawn (0: #cores)
  img-suffix = .nii.gz      # File name suffix/extension used for NIfTI images
  dof-suffix = .dof.gz      # File name suffix/extension used for IRTK transformation files
  jac-suffix = -jac.nii.gz  # File name suffix/extension used for Jacobian determinant map
  # Default commands used for evaluation registration results (cf. section "Registration tools" below)
  apply      = transformation "${source}" "${out}" -target "${target}" -dofin "${phi}" -matchInputType
  apply-nn   = ${irtk.apply} -nn
  jacobian   = jacobian "${target}" "${out}" "${phi}"
}

# ----------------------------------------------------------------------------------------------------------------------
# Task execution environment
environment {
  # Which environment to use for parallel and/or resource intensive tasks
  short = Local # Environment to use for short running jobs (<1hr)
  long  = Local # Environment to use for long running jobs (>=1hr)
  nodes = 1     # Maximum number of parallel tasks when local environment is used (0: #cores)
  # SLURM configuration
  slurm {
    host = predict5.doc.ic.ac.uk
    user = as12312
    auth = id_dsa
    queue {
      short = short # Name of queue for short running jobs (<1hr)
      long  = long  # Name of queue for long running jobs (>=1hr)
    }
  }
  # TODO: Condor configuration
  # TODO: EGI configuratino
}

# ----------------------------------------------------------------------------------------------------------------------
# Dataset used for evaluation
dataset {
  name   = MAC2012                 # Name of dataset
  dir    = Dataset/${dataset.name} # Top-level directory (if any, otherwise specify individual (absolute) paths)
  shared = true                    # Whether dataset directory is readable from all compute nodes
                                   # true:  Read input files directly from the dataset directory
                                   # false: For tasks executed on remote environment, copy input files to the workspace if
                                   #        it is shared between compute nodes or the working directory of the task otherwise
  # Structural MR images to be registered
  images {
    dir     = Images
    csv     = Info/Images.csv
    prefix  = ""
    suffix  = _3.nii.gz
    bgvalue = 0
  }
  # Corresponding (manual/semi-automatic) expert segmentations
  labels {
    dir    = Labels
    csv    = Info/Labels.csv
    prefix = ""
    suffix = _3_glm.nii.gz
  }
  # Reference image/template used for initial spatial normalization
  template {
    id    = mni305
    image = ../../Template/${dataset.template.id}.nii.gz
  }
}

# ----------------------------------------------------------------------------------------------------------------------
# Directories in which shared binary files and output files are stored
workspace {
  dir    = Workspace # Top-level directory of workspace
  shared = true      # Whether workspace is shared among compute nodes
                     # true:  Use workspace directory as common top-level directory of unpacked CARE archives
                     #        All input files are copied to the common rootfs subdirectory
                     # false: For tasks executed on remote environment, input/output files are copied to/from
                     #        the remote working directory of the task
  # Copies of dataset files if dataset is not accessible by all compute nodes
  images.dir = ${dataset.name}/images/original
  labels.dir = ${dataset.name}/labels/original
  # Transformations computed by spatial normalization and pre-alignment workflows
  dofs {
    dir     = ${dataset.name}/dofs
    rigid   = rigid
    initial = initial
    affine  = affine
    prefix  = ""
    suffix  = ${irtk.dof-suffix}
  }
  # Results of each registration
  output {
    affs    = ${dataset.name}"/dofs/${regId}-aff"
    dofs    = ${dataset.name}"/dofs/${regId}-${parId}"
    images  = ${dataset.name}"/images/${regId}-${parId}"
    labels  = ${dataset.name}"/labels/${regId}-${parId}"
    results = ${dataset.name}"/results/${regId}-${parId}"
    summary = ${dataset.name}"/results"
    append  = true # Whether to append summary of results to
    backup  = true # Whether to backup previous results before overwriting them
  }
  # Settings for command output logging
  logs {
    dir    = ${dataset.name}/logs
    suffix = .log
    append = false
    flush  = true
    tee    = true
  }
}

# ----------------------------------------------------------------------------------------------------------------------
# Registration tools to be evaluated
#
# registration {
#   <name> {
#     command    = Registration command
#     params     = CSV file with additional parameters for which different values are to be explored
#     aff-suffix = File name suffix for transformation written by dof2aff tool (default: irtk.dof-suffix)
#     phi-suffix = File name suffix for transformation written by command tool (default: irtk.dof-suffix)
#     jac-suffix = File name suffix for Jacobian determinant map written by jacobian tool (default: irtk.jac-suffix)
#     dof2aff    = Convert affine IRTK transformation to input transformation  (default: none)
#     phi2dof    = Convert output transformation to IRTK transformation (default: none)
#     apply      = Deform intensity image (using linear interpolation) (default: irtk.apply)
#     apply-nn   = Deform label image using nearest neighbor interpolation (default: irtk.apply-nn)
#     jacobian   = Compute determinant of transformation Jacobian (default: irtk.jacobian)
#   }
# }
#
# Each of the above entries are the commands used for the individual steps, with variables ${name}
# (NOTE: must be enclosed in double quotes to not expand these to other configuration file entries)
# for input and output file paths and parameters listed in the "params" CSV file.
# The available variables for each command are:
#
# dof2aff:  dof      Input transformation in IRTK format
#           aff      Output transformation in format suitable for registration "command"
#
# command:  target   Fixed target image
#           source   Moving source image
#           aff      Affine input transformation
#           phi      Output transformation
#           [par]    Any parameter named by the header in the "params" CSV file
#
# phi2dof:  phi      Input transformation as written by registration "command"
#           dof      Output transformation in IRTK format
#
# If no phi2dof tool is specified, the following commands are required. These are optional otherwise,
# in which case the respective IRTK tools are used instead.
#
# apply:    target   Fixed target image defining image grid on which to resample the source image
#           source   Input source image
#           phi      Transformation as written by registration "command"
#           out      Resampled/deformed source image
#
# apply-nn: Same as "apply" but input images contain discrete segmentation labels
#
# jacobian: target   Fixed target image specifying the attributes of the output image
#           phi      Transformation as written by registration "command"
#           out      Output Jacobian determinant map (i.e., image)
#
registration {
  ireg-ffd {
    command = ${irtk.dir}/ireg "${target}" "${source}" -threads ${irtk.threads} -model FFD -dofin "${aff}" -dofout "${phi}" """
              -par "Strict step length range = No"
              -par "Maximum streak of rejected steps = 1"
              -par "Control point spacing = ${ds}"
              -par "Bending energy weight = ${be}"
              """
    params  = ${dataset.dir}/Config/ireg-ffd.csv
  }
  ireg-svffd {
    command = ${irtk.dir}/ireg "${target}" "${source}" -threads ${irtk.threads} -model SVFFD -dofin "${aff}" -dofout "${phi}" """
              -par "Strict step length range = No"
              -par "Maximum streak of rejected steps = 1"
              -par "Control point spacing = ${ds}"
              -par "Bending energy weight = ${be}"
              -par "Integration method = ${im}"
              -par "No. of BCH terms = ${bch}"
              """
    params  = ${dataset.dir}/Config/ireg-svffd.csv
  }
  reg_f3d {
    dir        = Bin/NiftyReg
    aff-suffix = .txt
    phi-suffix = .nii.gz
    dof2aff    = ${irtk.dir}/dof2niftk "${dof}" "${aff}"
    command    = ${registration.reg_f3d.dir}/reg_f3d -ref "${target}" -flo "${source}" -aff "${aff}" -cpp "${phi}" -sx "${ds}" -be "${be}" -ln "${ln}" -maxit "${maxit}"
    params     = ${dataset.dir}/Config/reg_f3d.csv
    phi2dof    = ${irtk.dir}/niftk2dof "${phi}" "${dof}"
  }
  reg_f3d-vel {
    aff-suffix = .txt
    phi-suffix = .nii.gz
    dof2aff    = ${irtk.dir}/dof2niftk "${dof}" "${aff}"
    command    = ${registration.reg_f3d.command} -vel
    params     = ${dataset.dir}/Config/reg_f3d.csv
    phi2dof    = ${irtk.dir}/niftk2dof "${phi}" "${dof}"
  }
}

# ----------------------------------------------------------------------------------------------------------------------
# Evaluation of transformation obtained by registration command
evaluation {
  # Overlap of propagated labels and fixed target image labels
  overlap {
    measure = [DSC, JSI]                         # Overlap measures to compute and report
    labels  = [Cortical, Non-Cortical, All]      # Groups of labels for which to compute mean overlap
    summary = "${regId}-${parId}-${measure}.csv" # File name of CSV file summarizing the results. Use placeholders for:
                                                 # ${regId}   => Name of registration
                                                 # ${parId}   => Row of parameter set in "params" CSV file
                                                 # ${measure} => Name of overlap "measure"
    append  = false                              # Whether to append results to existing summary file
  }
  # Jacobian determinant of transformation
}

