#!/bin/bash

## Auxiliary script to run NiftyReg F3D and convert output to MIRTK .dof

. "$(dirname "$BASH_SOURCE")/../../etc/settings.sh" || exit 1
[ -n "$topdir"   ] || error "etc/settings.sh: topdir not set"
[ -n "$mirtk"    ] || error "etc/settings.sh: mirtk executable path not set"
[ -n "$niftyreg" ] || error "etc/settings.sh: niftyreg installation prefix not set"

[ ${mirtk:0:1} = / ] || mirtk="$topdir/$mirtk"
[ ${niftyreg:0:1} = / ] || niftyreg="$topdir/$niftyreg"

args=()
cpp=
dof=
res=
version=
issym=false
isvel=false

while [ $# -gt 0 ]; do
  case "$1" in
    -ver)
      version="$2"
      shift; ;;
    -dof)
      dof="$2"
      shift; ;;
    -cpp)
      cpp="$2"
      shift; ;;
    -res)
      res="$2"
      shift; ;;
    -sym)
      issym=true;
      ;;
    -vel)
      isvel=true;
      ;;
    -omp)
      threads="$2"
      shift; ;;
    *)
      args=("${args[@]}" "$1")
      ;;
  esac
  shift
done

if [ $isvel = true ]; then
  args=("${args[@]}" '-vel')
  issym=true  # implied, *do not* add use -sym option, as it will override -vel!
elif [ $issym = true ]; then
  args=("${args[@]}" '-sym')
fi

if [ -z "$cpp" -a -z "$dof" ]; then
  error "Missing -cpp or -dof option argument"
fi

if [ -n "$version" ]; then
  niftyreg="$niftyreg-$version"
  [ -f "$niftyreg/bin/reg_f3d" ] || error "NiftyReg version $version not found in '$niftyreg'"
  if [ "$version" != '1.3.9' ]; then
    if [ -n "$threads" -a $threads -ge 0 ]; then
      [ $threads -gt 0 ] || threads=1
      args=("${args[@]}" -omp "$threads")
    fi
  fi
fi

if [ -z "$res" -o -z "$cpp" ]; then
  tmp="$(mktemp -d)"
  [ $? -eq 0 -a -n "$tmp" ] || error "Failed to create temporary directory"
  [ -n "$res" ] || res="$tmp/res.nii.gz"
  [ -n "$cpp" ] || cpp="$tmp/cpp.nii.gz"
else
  tmp=
fi

run()
{
  echo "> $@"
  "$@" || {
    [ -z "$tmp" -o "$tmp" = / ] || rm -rf "$tmp"
    exit 1
  }
}

echo "Host: $(hostname)"
export LD_LIBRARY_PATH="$niftyreg/lib:$LD_LIBRARY_PATH"
export DYLD_LIBRARY_PATH="$niftyreg/lib:$DYLD_LIBRARY_PATH"
time run "$niftyreg/bin/reg_f3d" "${args[@]}" -cpp "$cpp" -res "$res"
[ -z "$dof" ] || run "$mirtk" convert-dof "$cpp" "$dof" -input-format f3d
