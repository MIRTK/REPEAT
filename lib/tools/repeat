#!/bin/bash

## Main script to generate and execute HTCondor batch jobs
##
## This script checks which step was last completed, and then
## generates the job description files for the next step in the
## workflow. It has to be run multiple times until all steps
## are done, as indicated by the last message to STDOUT.
##
## Note: Jobs can also be exeucted serial locally (*not* recommended),
##       or submitted to an alternatively supported batch queuing
##       system. At the moment, any 'queue' argument that is not
##       'condor'/'htcondr', is assumed to correspond to a SLURM
##       partition to which the jobs are submitted instead.

nosubmit=false
noregister=false
memory=8

print_help()
{
  error "usage: $(basename $BASH_SOURCE) [-q <queue>] -d <dataset> -r <regid> [-m <memory_in_GB>] [-nosubmit] [-noregister] [--] [<cfgids>]"
}

submit()
{
  local jobdesc="$1"
  grep -e '^ *queue' "$jobdesc" > /dev/null
  if [ $? -eq 0 ]; then
    local i=0
    local n=3
    local s=30
    local log=
    if [ $backend = 'condor' ]; then
      echo "> condor_submit '$jobdesc'"
    else
      log="${jobdesc/\/bin\//\/log\/}"
      log="${log/.condor/.log}"
      echo "> $libdir/tools/submit '$jobdesc' --log '$log' --backend '$backend' --queue '$queue' --memory '$memory' --threads '$threads' --job-as-array"
    fi
    if [ $nosubmit != true ]; then
      while [ $i -lt $n ]; do
        if [ $backend = 'condor' ]; then
          condor_submit "$jobdesc"
        else
          "$libdir/tools/submit" "$jobdesc" --log "$log" --backend "$backend" --queue "$queue" --memory "$memory" --threads "$threads" --job-as-array
        fi
        [ $? -ne 0 ] || break
        let i++
        if [ $i -eq $n ]; then
          error "Job submission failed for $n times, aborting"
        fi
        echo "Job submission failed, trying again in $s sec..."
        sleep $s
      done
    fi
    jobs_submitted=true
  else
    error "No jobs in $1, but could not find output files before?!"
  fi
}

# ------------------------------------------------------------------------------
# load settings and auxiliary functions
. "$(dirname "$BASH_SOURCE")/../../etc/settings.sh" || exit 1
[ -n "$topdir" ] || error "etc/settings.sh: topdir not set"
[ -n "$libdir" ] || error "etc/settings.sh: libdir not set"
[ -n "$etcdir" ] || error "etc/settings.sh: etcdir not set"
[ -n "$setdir" ] || error "etc/settings.sh: setdir not set"
[ -n "$cfgdir" ] || error "etc/settings.sh: cfgdir not set"
[ -n "$vardir" ] || error "etc/settings.sh: vardir not set"
[ -n "$csvdir" ] || error "etc/settings.sh: csvdir not set"
[ -n "$threads" ] || threads=1

# change to top-level directory
run cd "$topdir"

queue=''
backend='local'
cfgids=()
while [ $# -gt 0 ]; do
  case "$1" in
    -q|-queue)
      queue="$2"
      shift; ;;
    -d|-dataset)
      dataset="$2"
      shift; ;;
    -r|-reg|regid)
      regid="$2"
      shift; ;;
    -m|-memory)
      memory="$2"
      shift; ;;
    -nosubmit)
      nosubmit=true
      ;;
    -noreg|-noregister)
      noregister=true
      ;;
    --)
      shift
      cfgids=("${cfgids[@]}" "$@")
      break; ;;
    -*)
      error "Unknown option: $1"
      ;;
    *)
      cfgids=("${cfgids[@]}" "$1")
      ;;
  esac
  shift
done

if [ "$queue" = 'condor' -o "$queue" = 'htcondor' ]; then
  backend='condor'
  queue=''
elif [ -n "$queue" ]; then
  backend='slurm'
  [ "$queue" != 'slurm' ] || queue='long'
fi

# evaluation dataset
[ -n "$dataset" ] || print_help
. "$setdir/$dataset.sh" || exit 1
[ ${#chns[@]}   -eq 1 ] || error "$setdir/$dataset.sh: chns must be array of length 1"
[ ${#imgids[@]} -gt 0 ] || error "$setdir/$dataset.sh: imgids not set"
[ ${#tgtids[@]} -gt 0 ] || tgtids=("${imgids[@]}")
[ ${#srcids[@]} -gt 0 ] || srcids=("${imgids[@]}")

# registration method
[ -n "$regid" ] || print_help
version="${regid/*-}"
[ $(is_version "$version") = true ] || version=''

# whether files were pre-computed or provided by someone
extdof="$(use_existing_dofs "$dataset" "$regid")"
extout="$(use_existing_imgs "$dataset" "$regid")"

# generate parameters CSV or check existence of it or preset .cfg file
if [ "$regid" != 'affine' -a "$extdof" != true -a "$extout" != true ]; then
  regcfg_found=false
  for cfgpre in "$dataset/" ''; do
    if [ -f "$cfgdir/$cfgpre$regid.csv" -o -f "$cfgdir/$cfgpre$regid.cfg" -o -f "$cfgdir/$cfgpre$regid.txt" ]; then
      regcfg_found=true
      break
    fi
    if [ -f "$cfgdir/$cfgpre$regid.gen" ]; then
      run "$cfgdir/$cfgpre$regid.gen"
      regcfg_found=true
      break
    fi
    if [ -n "$version" ]; then
      _regid=${regid%-*}
      if [ -f "$cfgdir/$cfgpre${_regid}.csv" -o -f "$cfgdir/$cfgpre${_regid}.cfg" -o -f "$cfgdir/$cfgpre${_regid}.txt" ]; then
        regcfg_found=true
        break
      fi
      if [ -f "$cfgdir/$cfgpre${_regid}.gen" ]; then
        run "$cfgdir/$cfgpre${_regid}.gen"
        regcfg_found=true
        break
      fi
    fi
  done
  if [ $regcfg_found = false ]; then
    error "Require either one of '$cfgdir/[$dataset/]$regid.{gen,csv,cfg,txt}'"
  fi
fi

# IDs of parameter sets
if [ "$regid" = 'affine' ]; then
  cfgids=('')
else
  [ ${#cfgids} -gt 0 ] || cfgids=($(get_cfgids "$dataset" "$regid"))
  [ ${#cfgids} -gt 0 ] || cfgids=('')
  issym="$(is_sym $regid)"
fi

# registration tool specific settings
dofsuf=$(get_dofsuf "$regid")
[ -n "$dofsuf" ] || error "get_dofsuf() not defined for $regid"
imgsuf=".nii.gz"

# ------------------------------------------------------------------------------
# disable evaluation measures that cannot be computed
if [ "$regid" = 'affine' ]; then
  evltime=false
  evljac=false
  evlice=false
  evlmte=false
fi
if [ $evltime = true ]; then
  if [ "$extdof" = true -o "$extout" = true ]; then
    echo "Info: Skipping evaluation of runtime because transformations/deformed images were pre-computed."
    evltime=false
  fi
fi
if [ $evljac = true ]; then
  if [ "$extdof" = false -a "$extout" = true ]; then
    echo "Info: Skipping evaluation of Jacobian determinants because only pre-computed deformed images are available."
    evljac=false
  fi
fi
if [ $evlice = true ]; then
  if [ "$extdof" = false -a "$extout" = true ]; then
    echo "Info: Skipping evaluation of inverse consistency error because only pre-computed deformed images are available."
    evlice=false
  elif [ ${#tgtids[@]} -ne ${#srcids[@]} ]; then
    echo "Info: Skipping evaluation of inverse consistency error because not all srcimgs are used as tgtimgs."
    evlice=false
  elif [ $issym = true -a $allsym != true ]; then
    echo "Info: Skipping evaluation of inverse consistency error because allsym not 'true'."
    evlice=false
  fi
fi
if [ $evlmte = true  ]; then
  if [ "$extdof" = false -a "$extout" = true ]; then
    echo "Info: Skipping evaluation of mean transitivity error because only pre-computed deformed images are available."
    evlmte=false
  elif [ ${#tgtids[@]} -ne ${#srcids[@]} ]; then
    echo "Info: Skipping evaluation of mean transitivity error because not all srcimgs are used as tgtimgs."
    evlmte=false
  fi
fi

# ------------------------------------------------------------------------------
# common pre-processing steps
jobs_submitted=false

if [ "$extdof" != true -a "$extout" != true ]; then

  regdir="$vardir/$dataset/affine"
  jobdir="$regdir/bin"

  # compute affine transformations to reference
  n=0
  outdir="$regdir/dof"
  if [ -d "$outdir" ]; then
    for imgid in "${imgids[@]}"; do
      [ ! -f "$outdir/$imgid.dof.gz" ] || let n++
    done
  fi
  if [ $n -eq 0 ] || [ $update = true -a $n -lt ${#imgids[@]} ]; then
    jobdsc="$jobdir/register.condor"
    if [ $update = true -o ! -f "$jobdsc" ]; then
      run "$libdir/condor/gen-register-affine" "$dataset"
    fi
    submit "$jobdsc"
  elif [ $n -ne ${#imgids[@]} ]; then
    echo "Seems not all affine registration jobs have finished successfully! Found $n out of ${#imgids[@]} output files."
    error "Check log files of registration jobs in '$regdir/log/register' for errors, and re-run failed jobs manually."
  else
    echo "All affine registration jobs are done, found $n output files"
  fi
  if [ $jobs_submitted = true ]; then
    echo -e "\nWait for HTCondor jobs to finish, then re-run this script. Exiting for now."
    exit 0
  fi

  # transform images to affine reference space
  n=0
  nexpected=0
  for chn in ${chns[@]}; do
    chnbg=$(get_bgvalue "$chn")
    if [ $(is_mask "$chn") = true ]; then
      _mods=("${mods[@]}" "$chn")
    fi
  done
  _mods=($(echo "${mods[@]}" "${rois[@]}" | tr ' ' '\n' | sort -u))
  for mod in "${_mods[@]}"; do
    outdir="$regdir/out/$mod"
    let nexpected="$nexpected + ${#imgids[@]}"
    if [ -d "$outdir" ]; then
      for imgid in "${imgids[@]}"; do
        [ ! -f "$outdir/$imgid$imgsuf" ] || let n++
      done
    fi
  done
  if [ $n -eq 0 ] || [ $update = true -a $n -lt $nexpected ]; then
    jobdsc="$jobdir/transform.condor"
    if [ $update = true -o ! -f "$jobdsc" ]; then
      run "$libdir/condor/gen-transform-mirtk" "$dataset" 'affine'
    fi
    submit "$jobdsc"
  elif [ $n -ne $nexpected ]; then
    error "Seems not all image pre-alignment jobs have finished successfully! Found only $n out of $nexpected output files."
    error "Check log files of image pre-alignment jobs in '$regdir/log/transform' for errors, and re-run failed jobs manually."
  else
    echo "All image pre-alignment jobs are done, found $n output files"
  fi
  if [ $jobs_submitted = true ]; then
    echo -e "\nWait for HTCondor jobs to finish, then re-run this script. Exiting for now."
    exit 0
  fi

  # pad affinely aligned images using foreground masks
  n=0
  nexpected=0
  outdir="$regdir/pad"
  for chn in "${chns[@]}"; do
    msk=$(get_bgvalue "$chn")
    if [ -z "$msk" -o $(is_mask "$msk") != true ]; then
      for chn in "${chns[@]}"; do
        makedir "$outdir/$chn"
        for imgid in "${imgids[@]}"; do
          outimg="$outdir/$chn/$imgid$imgsuf"
          if [ ! -f "$outimg" ]; then
            run ln -s "../../out/$chn/$imgid$imgsuf" "$outimg"
          fi
        done
      done
    else
      let nexpected="$nexpected+${#imgids[@]}"
      if [ -d "$outdir/$chn" ]; then
        for imgid in "${imgids[@]}"; do
          [ ! -f "$outdir/$chn/$imgid$imgsuf" ] || let n++
        done
      fi
    fi
  done
  if [ $n -eq 0 -a $nexpected -gt 0 ] || [ $update = true -a $n -lt $nexpected ]; then
    jobdsc="$jobdir/apply-image-masks.condor"
    if [ $update = true -o ! -f "$jobdsc" ]; then
      run "$libdir/condor/gen-apply-image-masks" "$dataset"
    fi
    submit "$jobdsc"
  elif [ $n -ne $nexpected ]; then
    echo "Seems not all background padding jobs have finished successfully! Found $n out of $nexpected output files."
    error "Check log files of batch jobs in '$regdir/log/apply-image-masks' for errors, and re-run failed jobs manually."
  elif [ $nexpected -gt 0 ]; then
    echo "All background padding jobs are done, found $n output files"
  fi
  if [ $jobs_submitted = true ]; then
    echo -e "\nWait for HTCondor jobs to finish, then re-run this script. Exiting for now."
    exit 0
  fi

  # match histograms of images to histogram of reference image
  if [ "$nrmhst" = true ]; then
    n=0
    nexpected=0
    for chn in "${chns[@]}"; do
      outdir="$regdir/nrm/$chn"
      let nexpected="$nexpected + ${#imgids[@]}"
      if [ -d "$outdir" ]; then
        for imgid in "${imgids[@]}"; do
          [ ! -f "$outdir/$imgid$imgsuf" ] || let n++
        done
      fi
    done
    if [ $n -eq 0 ] || [ $update = true -a $n -lt $nexpected ]; then
      jobdsc="$jobdir/match-histograms.condor"
      if [ $update = true -o ! -f "$jobdsc" ]; then
        run "$libdir/condor/gen-match-histograms" "$dataset"
      fi
      submit "$jobdsc"
    elif [ $n -ne $nexpected ]; then
      error "Seems not all histogram matching jobs have finished successfully! Found only $n out of $nexpected output files."
      error "Check log files of jobs in '$regdir/log/match-histograms' for errors, and re-run failed jobs manually."
    else
      echo "All histogram matching jobs are done, found $n output files"
    fi
    if [ $jobs_submitted = true ]; then
      echo -e "\nWait for HTCondor jobs to finish, then re-run this script. Exiting for now."
      exit 0
    fi
  else
    for chn in "${chns[@]}"; do
      outdir="$regdir/nrm/$chn"
      makedir "$outdir"
      for imgid in "${imgids[@]}"; do
        outimg="$outdir/$imgid$imgsuf"
        if [ ! -f "$outimg" ]; then
          run ln -s "../../pad/$chn/$imgid$imgsuf" "$outimg"
        fi
      done
    done
  fi

  # crop affinely aligned images
  chns_and_msks=("${chns[@]}")
  for chn in "${chns[@]}"; do
    msk=$(get_bgvalue "$chn")
    if [ $(is_mask "$msk") = true ]; then
      append=true
      for c in "${chns_and_msks}"; do
        if [ "$c" = "$msk" ]; then
          append=false
          break
        fi
      done
      if [ $append = true ]; then
        chns_and_msks=("${chns_and_msks[@]}" "$msk")
      fi
    fi
  done

  n=0
  nexpected=0
  outdir="$regdir/crp"
  for chn in "${chns_and_msks[@]}"; do
    let nexpected="$nexpected+${#imgids[@]}"
    if [ -d "$outdir/$chn" ]; then
      for imgid in "${imgids[@]}"; do
        [ ! -f "$outdir/$chn/$imgid$imgsuf" ] || let n++
      done
    fi
  done
  if [ $n -eq 0 ] || [ $update = true -a $n -lt $nexpected ]; then
    jobdsc="$jobdir/crop-images.condor"
    if [ $update = true -o ! -f "$jobdsc" ]; then
      run "$libdir/condor/gen-crop-images" "$dataset"
    fi
    submit "$jobdsc"
  elif [ $n -ne $nexpected ]; then
    echo "Seems not all image cropping jobs have finished successfully! Found $n out of $nexpected output files."
    error "Check log files of batch jobs in '$regdir/log/crop-images' for errors, and re-run failed jobs manually."
  else
    echo "All image cropping jobs are done, found $n output files"
  fi
  if [ $jobs_submitted = true ]; then
    echo -e "\nWait for HTCondor jobs to finish, then re-run this script. Exiting for now."
    exit 0
  fi

fi # extdof?

# create ROI masks used to average voxel-wise quality measures
gen_create_roi_masks_updated=false
if [ "$extdof" = true ]; then
  roidir="$vardir/$dataset/shared/roi/$roi"
  jobdir="$vardir/$dataset/shared/bin"
else
  roidir="$vardir/$dataset/affine/roi/$roi"
  jobdir="$vardir/$dataset/affine/bin"
fi
for roi in "${rois[@]}"; do
  nrois=0
  if [ -d "$roidir" ]; then
    for tgtid in "${tgtids[@]}"; do
      let nrois="$nrois + $(find "$roidir/$roi" -type f -name "${tgtid}-l*$imgsuf" | wc -l)"
    done
  fi
  if [ $nrois -eq 0 ]; then
    jobdsc="$jobdir/create-$roi-masks.condor"
    if [ $update = true -a $gen_create_roi_masks_updated = false ] || [ ! -f "$jobdsc" ]; then
      run "$libdir/condor/gen-create-roi-masks" "$dataset" "$regid"
      gen_create_roi_masks_updated=true
    fi
    [ ! -f "$jobdsc" ] || submit "$jobdsc"
  else
    echo "Found $nrois $roi label mask files, assuming $roi mask creation jobs are done"
  fi
done

# wait for remaining pre-processing jobs
if [ $jobs_submitted = true ]; then
  echo -e "\nWait for HTCondor jobs to finish, then re-run this script. Exiting for now."
  exit 0
fi

# ----------------------------------------------------------------------------
# expected no. of transformed images, pairwise registrations
if [ "$regid" = 'affine' ]; then
  N=${#imgids[@]}
  npairs=$N
else
  N=0
  for tgtid in "${tgtids[@]}"; do
  for srcid in "${srcids[@]}"; do
    if [ "$tgtid" != "$srcid" ]; then
      let N++
    fi
  done; done
  
  npairs=0
  if [ "$issym" = true ] && [ $allsym != true ]; then
    for tgtid in "${tgtids[@]}"; do
    for srcid in "${srcids[@]}"; do
      if [[ "$tgtid" < "$srcid" ]]; then
        let npairs++
      fi
    done; done
  else
    npairs=$N
  fi
fi

# ------------------------------------------------------------------------------
# for each parameter set...
all_done=true
for cfgid in "${cfgids[@]}"; do

  regdir="$vardir/$dataset/$regid"
  resdir="$csvdir/$dataset/$regid"

  if [ -n "$cfgid" ]; then
    echo -e "\nConfiguration $cfgid:"
    regdir="$regdir/$cfgid"
    resdir="$resdir/$cfgid"
  fi

  jobdir="$regdir/bin"
  jobs_submitted=false

  # ----------------------------------------------------------------------------
  # perform pairwise registrations
  if [ "$regid" != 'affine' ]; then
    ndofs=0
    outdir="$regdir/dof"
    if [ -d "$outdir" ]; then
      for tgtid in "${tgtids[@]}"; do
      for srcid in "${srcids[@]}"; do
        [ $tgtid = $srcid ] || [ ! -f "$outdir/$tgtid-$srcid$dofsuf" ] || let ndofs++
      done; done
    fi
    if [ "$extdof" = true ]; then
      if [ $ndofs -ne $npairs ]; then
        error "Expected $npairs existing transformations matching '$outdir/*-*$dofsuf', but found only $ndofs!"
      fi
    elif [ "$extout" != true ]; then
      if [ $ndofs -eq 0 ] || [ $update = true -a $ndofs -lt $npairs ]; then
        if [ "$extdof" = true ]; then
          error "Expected $npairs existing transformations matching patter: $outdir/*-*$dofsuf, but found only $ndofs!"
        else
          jobdsc="$jobdir/register.condor"
          if [ $update = true -o ! -f "$jobdsc" ]; then
            run "$libdir/condor/gen-register-${regid/-*}" "$dataset" "$regid" "$cfgid"
          fi
          _nosubmit="$nosubmit"
          [ "$noregister" != true ] || nosubmit=true
          submit "$jobdsc"
          nosubmit=${_nosubmit}
        fi
      elif [ $ndofs -ne $npairs ]; then
        echo "Seems not all registration jobs have finished successfully! Found $ndofs out of $npairs output files."
        error "Check log files of registration jobs in '$regdir/log/register' for errors, and re-run failed jobs manually."
      else
        echo "All registration jobs are done, found $ndofs output files"
      fi
      if [ $jobs_submitted = true ]; then
        all_done=false
        continue
      fi
    fi
  fi

  # ----------------------------------------------------------------------------
  # deform source images to target images
  if [ "$regid" != 'affine' ]; then
    if [ "$extout" != true ]; then
      gen_transform_updated=false
      for mod in "${mods[@]}"; do
        n=0
        outdir="$regdir/out/$mod"
        if [ -d "$outdir" ]; then
          for tgtid in "${tgtids[@]}"; do
          for srcid in "${srcids[@]}"; do
            [ $tgtid = $srcid ] || [ ! -f "$outdir/$srcid-$tgtid$imgsuf" ] || let n++
          done; done
        fi
        if [ $n -eq 0 ] || [ $update = true -a $n -lt $N ]; then
          jobdsc="$jobdir/transform-$mod.condor"
          if [ $update = true -a $gen_transform_updated = false ] || [ ! -f "$jobdsc" ]; then
            toolkit="$(get_toolkit "$regid")"
            if [ "$dofsuf" = '.dof' -o "$dofsuf" = '.dof.gz' ]; then
              toolkit='mirtk'
            fi
            run "$libdir/condor/gen-transform-$toolkit" "$dataset" "$regid" "$cfgid"
            gen_transform_updated=true
          fi
          submit "$jobdsc"
        elif [ $n -ne $N ]; then
          error "Seems not all $mod image deformation jobs have finished successfully! Found only $n out of $N output files."
          error "Check log files of image deformation jobs in '$regdir/log/transform-$mod' for errors, and re-run failed jobs manually."
        else
          echo "All $mod image deformation jobs are done, found $n output files"
        fi
      done
      if [ $jobs_submitted = true ]; then
        all_done=false
        continue
      fi
    else
      echo "Info: Using provided already deformed images for evaluation"
    fi
  fi

  # ----------------------------------------------------------------------------
  # evaluate transformation quality measures
  if [ "$evljac" = true ]; then

    measure="jac"
    outdir="$regdir/evl/dof/$measure"
    logdir="$regdir/log/evaluate-dof-$measure"

    n=0
    if [ -d "$outdir" ]; then
      for tgtid in "${tgtids[@]}"; do
      for srcid in "${srcids[@]}"; do
        [ $tgtid = $srcid ] || [ ! -f "$outdir/$tgtid-$srcid$imgsuf" ] || let n++
      done; done
    fi
    if [ $n -eq 0 ] || [ $update = true -a $n -lt $ndofs ]; then
      jobdsc="$jobdir/evaluate-dof-$measure.condor"
      if [ $update = true -o ! -f "$jobdsc" ]; then
        run "$libdir/condor/gen-evaluate-measures" "$dataset" "$regid" "$cfgid"
      fi
      submit "$jobdsc"
    elif [ $n -ne $ndofs ]; then
      echo "Seems not all Jacobian determinant evaluation jobs have finished successfully! Found $n out of $ndofs output files."
      error "Check log files of jobs in '$logdir' for errors, and re-run failed jobs manually."
    else
      echo "All Jacobian determinant evaluation jobs are done, found $n output files"
    fi
  fi

  if [ "$evlice" = true ]; then

    measure="mice"
    outdir="$regdir/evl/dof/$measure"
    logdir="$regdir/log/evaluate-dof-$measure"

    n=0
    if [ -d "$outdir" ]; then
      for tgtid in "${tgtids[@]}"; do
        [ ! -f "$outdir/$tgtid$imgsuf" ] || let n++
      done
    fi
    if [ $n -eq 0 ] || [ $update = true -a $n -lt ${#tgtids[@]} ]; then
      jobdsc="$jobdir/evaluate-dof-$measure.condor"
      if [ $update = true -o ! -f "$jobdsc" ]; then
        run "$libdir/condor/gen-evaluate-measures" "$dataset" "$regid" "$cfgid"
      fi
      submit "$jobdsc"
    elif [ $n -ne ${#tgtids[@]} ]; then
      echo "Seems not all inverse consistency evaluation jobs have finished successfully! Found only $n out of ${#tgtids[@]} output files."
      error "Check log files of jobs in '$logdir' for errors, and re-run failed jobs manually."
    else
      echo "All inverse consistency evaluation jobs are done, found $n output files"
    fi
  fi

  if [ "$evlmte" = true ]; then

    measure="mte"
    outdir="$regdir/evl/dof/$measure"
    logdir="$regdir/log/evaluate-dof-$measure"

    n=0
    if [ -d "$outdir" ]; then
      for tgtid in "${tgtids[@]}"; do
        [ ! -f "$outdir/$tgtid$imgsuf" ] || let n++
      done
    fi
    if [ $n -eq 0 ] || [ $update = true -a $n -lt ${#tgtids[@]} ]; then
      jobdsc="$jobdir/evaluate-dof-$measure.condor"
      if [ $update = true -o ! -f "$jobdsc" ]; then
        run "$libdir/condor/gen-evaluate-measures" "$dataset" "$regid" "$cfgid"
      fi
      submit "$jobdsc"
    elif [ $n -ne ${#tgtids[@]} ]; then
      echo "Seems not all transitivity evaluation jobs have finished successfully! Found only $n out of ${#tgtids[@]} output files."
      error "Check log files of jobs in '$logdir' for errors, and re-run failed jobs manually."
    else
      echo "All transitivity evaluation jobs are done, found $n output files"
    fi
  fi

  # ----------------------------------------------------------------------------
  # evaluate (voxel-wise) quality measures
  gen_evaluate_measures_updated=false
  for mod in "${mods[@]}"; do
  for measure in $(get_measures "$mod"); do
    n=0
    [ $measure != 'overlap' ] || measure='dsc'
    if [ $(is_overlap_measure $measure) = true ]; then
      for tgtid in "${tgtids[@]}"; do
        [ ! -f "$resdir/$tgtid-$mod-$measure.csv" ] || let n++
      done
    else
      outdir="$regdir/evl/$mod/$measure"
      for tgtid in "${tgtids[@]}"; do
        [ ! -f "$outdir/$tgtid$imgsuf" ] || let n++
      done
    fi
    if [ $n -eq 0 ] || [ $update = true -a $n -lt ${#tgtids[@]} ]; then
      jobdsc="$jobdir/evaluate-$mod-$measure.condor"
      if [ $update = true -a $gen_evaluate_measures_updated = false ] || [ ! -f "$jobdsc" ]; then
        run "$libdir/condor/gen-evaluate-measures" "$dataset" "$regid" "$cfgid"
        gen_evaluate_measures_updated=true
      fi
      submit "$jobdsc"
    elif [ $n -ne ${#tgtids[@]} ]; then
      logdir="$regdir/log/evaluate-$mod-$measure"
      echo "Seems not all $mod $measure evaluation jobs have finished successfully! Found only $n out of ${#tgtids[@]} output files."
      error "Check log files of jobs in '$logdir' for errors, and re-run failed jobs manually."
    else
      echo "All $mod $measure evaluation jobs are done, found $n output files"
    fi
  done; done

  if [ $jobs_submitted = true ]; then
    all_done=false
    continue
  else
    echo "All evaluation jobs are done"
  fi

  # ----------------------------------------------------------------------------
  # collect runtime measurements
  if [ "$evltime" = true ]; then
    n=0
    for tgtid in "${tgtids[@]}"; do
      [ ! -f "$resdir/$tgtid-time.csv" ] || let n++
    done
    if [ $n -eq 0 ] || [ $update = true -a $n -lt ${#tgtids[@]} ]; then
      jobdsc="$jobdir/summarize-runtime.condor"
      if [ $update = true -o ! -f "$jobdsc" ]; then
        run "$libdir/condor/gen-summarize-measures" "$dataset" "$regid" "$cfgid"
      fi
      submit "$jobdsc"
    elif [ $n -ne ${#tgtids[@]} ]; then
      logdir="$regdir/log/summarize-runtime"
      echo "Seems not all runtime collection jobs have finished successfully! Found only $n out of ${#tgtids[@]} CSV files."
      error "Check log files of jobs in '$logdir' for errors, and re-run failed jobs manually."
    else
      echo "All runtime collection jobs are done, found $n CSV files"
    fi
  fi

  # ----------------------------------------------------------------------------
  # evaluate statistics of Jacobian determinant values
  gen_summarize_measures_updated=false
  if [ "$evljac" = true ]; then
    n=0
    for tgtid in "${tgtids[@]}"; do
      [ ! -f "$resdir/$tgtid-logjac.csv" ] || let n++
    done
    if [ $n -eq 0 ] || [ $update = true -a $n -lt ${#tgtids[@]} ]; then
      jobdsc="$jobdir/summarize-dof-logjac.condor"
      if [ $update = true -a $gen_summarize_measures_updated = false ] || [ ! -f "$jobdsc" ]; then
        run "$libdir/condor/gen-summarize-measures" "$dataset" "$regid" "$cfgid"
        gen_summarize_measures_updated=true
      fi
      submit "$jobdsc"
    elif [ $n -ne ${#tgtids[@]} ]; then
      logdir="$regdir/log/summarize-dof-logjac"
      echo "Seems not all log Jacobian evaluation jobs have finished successfully! Found only $n out of ${#tgtids[@]} CSV files."
      error "Check log files of jobs in '$logdir' for errors, and re-run failed jobs manually."
    else
      echo "All log Jacobians evaluation jobs are done, found $n CSV files"
    fi
  fi

  # ----------------------------------------------------------------------------
  # evaluate statistics of mean inverse consistency error
  if [ "$evlice" = true ]; then
    n=0
    [ ! -f "$resdir/mice.csv" ] || let n++
    if [ $n -eq 0 ] || [ $update = true -a $n -ne 1 ]; then
      jobdsc="$jobdir/summarize-dof-mice.condor"
      if [ $update = true -a $gen_summarize_measures_updated = false ] || [ ! -f "$jobdsc" ]; then
        run "$libdir/condor/gen-summarize-measures" "$dataset" "$regid" "$cfgid"
        gen_summarize_measures_updated=true
      fi
      submit "$jobdsc"
    elif [ $n -ne 1 ]; then
      logdir="$regdir/log/summarize-dof-mice"
      echo "Seems not all MICE evaluation jobs have finished successfully! Could not find CSV file."
      error "Check '$regdir/log/summarize-dof-mice.err' for errors, and re-run failed jobs manually."
    else
      echo "All MICE evaluation jobs are done, found $n CSV file"
    fi
  fi

  # ----------------------------------------------------------------------------
  # evaluate statistics of mean transitivity error
  if [ "$evlmte" = true ]; then
    n=0
    [ ! -f "$resdir/mte.csv" ] || let n++
    if [ $n -eq 0 ] || [ $update = true -a $n -ne 1 ]; then
      jobdsc="$jobdir/summarize-dof-mte.condor"
      if [ $update = true -a $gen_summarize_measures_updated = false ] || [ ! -f "$jobdsc" ]; then
        run "$libdir/condor/gen-summarize-measures" "$dataset" "$regid" "$cfgid"
        gen_summarize_measures_updated=true
      fi
      submit "$jobdsc"
    elif [ $n -ne 1 ]; then
      logdir="$regdir/log/summarize-dof-mte"
      echo "Seems not all MTE evaluation jobs have finished successfully! Could not find CSV file."
      error "Check '$regdir/log/summarize-dof-mte.err' for errors, and re-run failed jobs manually."
    else
      echo "All MTE evaluation jobs are done, found $n CSV file"
    fi
  fi

  # ----------------------------------------------------------------------------
  # average/summarize quality measures
  n=0
  for tgtid in "${tgtids[@]}"; do
    [ ! -f "$resdir/$tgtid-mean.csv" ] || let n++
  done
  if [ $n -eq 0 ] || [ $update = true -a $n -lt ${#tgtids[@]} ]; then
    jobdsc="$jobdir/average-measures.condor"
    if [ $update = true -a $gen_summarize_measures_updated = false ] || [ ! -f "$jobdsc" ]; then
      run "$libdir/condor/gen-summarize-measures" "$dataset" "$regid" "$cfgid"
      gen_summarize_measures_updated=true
    fi
    submit "$jobdsc"
  elif [ $n -ne ${#tgtids[@]} ]; then
    logdir="$regdir/log/average-measures"
    echo "Seems not all jobs for averaging the voxel-wise measure have finished successfully! Found only $n out of ${#tgtids[@]} CSV files."
    error "Check log files of jobs in '$logdir' for errors, and re-run failed jobs manually."
  else
    echo "All jobs for averaging the voxel-wise measures are done, found $n CSV files"
  fi
  if [ $jobs_submitted = true ]; then
    all_done=false
    continue
  else
    echo "All jobs for configuration $cfgid finished!"
    echo "You find the results in '$topdir/$resdir'."
  fi

done

if [ $all_done = true ]; then
  echo -e "\nAll jobs finished! You find the results in '$topdir/$csvdir/$dataset/$regid'."
else
  echo -e "\nWait for HTCondor jobs to finish, then re-run this script. Exiting for now."
fi
