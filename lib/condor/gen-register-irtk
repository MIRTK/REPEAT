#!/bin/bash

## Generate HTCondor job description file for IRTK 'nreg' command (and others)

print_help()
{
  error "usage: $(basename $BASH_SOURCE) <dataset> <regid> [<cfgid>...]"
}

# load settings and auxiliary functions
. "$(dirname "$BASH_SOURCE")/../etc/settings.sh" || exit 1
[ -n "$topdir" ] || error "etc/settings.sh: topdir not set"
[ -n "$etcdir" ] || error "etc/settings.sh: etcdir not set"
[ -n "$setdir" ] || error "etc/settings.sh: setdir not set"
[ -n "$cfgdir" ] || error "etc/settings.sh: cfgdir not set"
[ -n "$vardir" ] || error "etc/settings.sh: vardir not set"
[ -n "$irtk"   ] || error "etc/settings.sh: irtk not set"

# change to top-level directory
run cd "$topdir"

# evaluation dataset
dataset="$1"; shift
[ -n "$dataset" ] || print_help
. "$setdir/$dataset.sh" || exit 1
[ ${#chns[@]}   -eq 1 ] || error "$setdir/$dataset.sh: chns must be array of length 1"
[ ${#imgids[@]} -gt 0 ] || error "$setdir/$dataset.sh: imgids not set"
[ ${#tgtids[@]} -gt 0 ] || tgtids=("${imgids[@]}")
[ ${#srcids[@]} -gt 0 ] || srcids=("${imgids[@]}")

# images that drive the registration
chn="${chns[0]}"
bgvalue="$(get_bgvalue "$chn")"

# registration method
regid="$1"; shift
[ -n "$regid" ] || print_help

# IDs of parameter sets
cfgids=("$@")
[ ${#cfgids} -gt 0 ] || cfgids=($(get_cfgids "$regid"))
[ ${#cfgids} -gt 0 ] || error "etc/settings.sh: get_cfgids is empty for $regid"
issym="$(is_sym $regid)"
regcmd=${regid/*-}

# generate job description for each configuration
regpar="$cfgdir/$regid.par"
regcsv="$cfgdir/$regid.csv"
regdir="$vardir/$dataset/$regid"

imgdir="$vardir/$dataset/affine/out"
imgpre="$chn/"
imgsuf=".nii.gz"

if [ ${BASH_VERSION/.*} -lt 4 ]; then
  header=()
  while IFS='\n' read line; do
    header=("${header[@]}" "$line")
  done < <(cut -d, -f1 "$regpar")
else
  readarray -t header < <(cut -d, -f1 "$regpar")
fi
[ ${#header[@]} -ge 1 ] || {
  error "$regpar: Expected at least one row"
}

if [ ${BASH_VERSION/.*} -lt 4 ]; then
  parkey=()
  while IFS='\n' read line; do
    parkey=("${parkey[@]}" "$line")
  done < <(cut -d, -f2 "$regpar")
else
  readarray -t parkey < <(cut -d, -f2 "$regpar")
fi
[ ${#header[@]} -eq ${#parkey[@]} ] || {
  error "$regpar: Expected two columns in each row, second column entry may be empty"
}

c=0
allsym_col=-1
bgvalue_col=-1
while [ $c -lt ${#header[@]} ]; do
  if [ ${header[c]} = allsym ]; then
    allsym_col=$c
  elif [ ${header[c]} = 'bg' ]; then
    bgvalue_col=$c
  fi
  let c++
done

for cfgid in "${cfgids[@]}"; do
  jobdir="$regdir/$cfgid/bin"
  jobdsc="$jobdir/register.condor"
  if [ $update = true ] || [ ! -f "$jobdsc" ]; then
    echo "Update: $jobdsc"

    # paths
    dofdir="$regdir/$cfgid/dof"
    logdir="$regdir/$cfgid/log/register"
    pardir="$regdir/$cfgid/etc"

    # extract parameter values from CSV file
    if [ ${BASH_VERSION/.*} -lt 4 ]; then
      parval=()
      while IFS='\n' read line; do
        parval=("${parval[@]}" "$line")
      done < <(egrep "^$cfgid," "$regcsv" | tr , '\n')
    else
      readarray -t parval < <(egrep "^$cfgid," "$regcsv" | tr , '\n')
    fi
    [ -n "$parval" ] || error "$regcsv: Missing row '$cfgid,...'"
    [ ${#parval[@]} -eq ${#parkey[@]} ] || error "$regcsv: Expected ${#parkey[@]} columns for cfgid=$cfgid, got ${#parval[@]}"

    # get 'allsym' value from CSV if present, otherwise use global value of settings.sh
    [ $allsym_col -lt 0 ] || allsym=${parval[allsym_col]}

    # get 'bgvalue' value from CSV if present, otherwise use global bgvalue
    [ $bgvalue_col -lt 0 ] || bgvalue=${parval[bgvalue_col]}

    # assemble configuration
    if [ -n "$bgvalue" ]; then
      pars="Padding value = $bgvalue"
    else
      pars=""
    fi

    c=0
    while [ $c -lt ${#parkey[@]} ]; do
      if [ -n "${parkey[c]}" ]; then
        pars="${pars}\n${parkey[c]} = ${parval[c]}"
      fi
      let c++
    done

    # make directories
    makedir "$pardir"
    makedir "$dofdir"
    makedir "$logdir"
    makedir "$jobdir"

    # write configuration to file
    parin="$pardir/register.cfg"
    echo -e "$pars" > "$parin"

    # write job description
    cat > "$jobdsc" <<EOF_HEADER
universe   = vanilla
executable = $topdir/$libdir/measure-runtime
initialdir = $topdir

EOF_HEADER
    for tgtid in "${tgtids[@]}"; do
    for srcid in "${srcids[@]}"; do
      dofout="$dofdir/$tgtid-$srcid.dof.gz"
      [ $force = true ] || [ ! -f "$dofout" ] || continue
      [ $allsym = true ] || [ $issym != true ] || [[ $tgtid < $srcid ]] || [ $tgtid = $srcid ] || continue
      cat >> "$jobdsc" <<EOF_QUEUE
arguments = "'$irtk/$regcmd' '$imgdir/$imgpre$tgtid$imgsuf' '$imgdir/$imgpre$srcid$imgsuf' -parin '$parin' -dofout '$dofout'"
error     = $logdir/$tgtid-$srcid.err
output    = $logdir/$tgtid-$srcid.out
log       = $logdir/$tgtid-$srcid.log
queue

EOF_QUEUE
    done; done
  else
    echo "Exists: $jobdsc"
  fi
done
