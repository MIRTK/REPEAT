#!/bin/bash

## Generate HTCondor job description file for MIRTK 'register' command

print_help()
{
  error "usage: $(basename $BASH_SOURCE) <dataset> <regid> [<cfgid>...]"
}

# load settings and auxiliary functions
. "$(dirname "$BASH_SOURCE")/../../etc/settings.sh" || exit 1
[ -n "$topdir" ] || error "etc/settings.sh: topdir not set"
[ -n "$etcdir" ] || error "etc/settings.sh: etcdir not set"
[ -n "$setdir" ] || error "etc/settings.sh: setdir not set"
[ -n "$cfgdir" ] || error "etc/settings.sh: cfgdir not set"
[ -n "$vardir" ] || error "etc/settings.sh: vardir not set"
[ -n "$mirtk"  ] || error "etc/settings.sh: mirtk not set"

# change to top-level directory
run cd "$topdir"

# evaluation dataset
dataset="$1"; shift
[ -n "$dataset" ] || print_help
. "$setdir/$dataset.sh" || exit 1
[ ${#chns[@]}   -gt 0 ] || error "$setdir/$dataset.sh: chns not set"
[ ${#imgids[@]} -gt 0 ] || error "$setdir/$dataset.sh: imgids not set"
[ ${#tgtids[@]} -gt 0 ] || tgtids=("${imgids[@]}")
[ ${#srcids[@]} -gt 0 ] || srcids=("${imgids[@]}")

# registration method
regid="$1"; shift
[ -n "$regid" ] || print_help
issym="$(is_sym $regid)"
isic="$(is_ic $regid)"

# IDs of parameter sets
cfgids=("$@")
[ ${#cfgids} -gt 0 ] || cfgids=($(get_cfgids "$regid"))
[ ${#cfgids} -gt 0 ] || error "etc/settings.sh: get_cfgids is empty for $regid"

# generate job description for each configuration
imgdir="$vardir/$dataset/affine/out"
regdir="$vardir/$dataset/$regid"
regcsv="$cfgdir/$regid.csv"
paropt=($(head -n1 "$regcsv" | tr , '\n'))
config="$(cat "$cfgdir/$regid.txt")"
dofin='Id'


#                   Energy function =
energy_indentation="                "

for cfgid in "${cfgids[@]}"; do

  echo "Write HTCondor job description for MIRTK register configuration $cfgid"

  # paths
  jobdir="$regdir/$cfgid/bin"
  dofdir="$regdir/$cfgid/dof"
  logdir="$regdir/$cfgid/log/register"
  pardir="$regdir/$cfgid/etc"

  # extract parameter values from CSV file
  if [ ${BASH_VERSION/.*} -lt 4 ]; then
    parval=()
    while IFS='\n' read line; do
      parval=("${parval[@]}" "$line")
    done < <(egrep "^$cfgid," "$regcsv" | tr , '\n')
  else
    readarray -t parval < <(egrep "^$cfgid," "$regcsv" | tr , '\n')
  fi
  [ -n "$parval" ] || error "$regcsv: Missing row '$cfgid,...'"
  [ ${#parval[@]} -eq ${#paropt[@]} ] || error "$regcsv: Expected ${#paropt[@]} columns for cfgid=$cfgid, got ${#parval[@]}"

  # get 'allsym' value from CSV if present, otherwise use global value of settings.sh
  [ $allsym_col -lt 0 ] || allsym=${parval[allsym_col]}

  # assemble data terms of energy function
  n=0
  bgpars=""
  energy=""
  for chn in "${chns[@]}"; do
    [ -z "$energy" ] || energy="${energy}...\n${energy_indentation}+ "
    if [ "$(is_seg "$chn")" = true ] || [ "$(is_prob "$chn")" = true ]; then
      term="SSD"
    else
      term="SIM"
    fi
    let t=$n+1
    let s=$n+2
    if [ "$issym" = true ]; then
      energy="${energy}${term}[Dissimilarity {i}](I($t) o T^-0.5, I($s) o T^0.5)"
    elif [ "$isic" = true ]; then
      energy="${energy}${term}[Dissimilarity {i}](I($t) o T^-1, I($s))"
      energy="${energy}${term}[Dissimilarity {i}](I($t), I($s) o T)"
    else
      energy="${energy}${term}[Dissimilarity {i}](I($t), I($s) o T)"
    fi
    bgvalue="$(get_bgvalue "$chn")"
    if [ -n "$bgvalue" ]; then
      bgpars="${bgpars}\nBackground value of image $t = $bgvalue"
      bgpars="${bgpars}\nBackground value of image $s = $bgvalue"
    fi
    n=$s
  done
  energy="${energy}...\n${energy_indentation}+ 0 BE[Bending energy](T)"
  energy="${energy}...\n${energy_indentation}+ 0 TP[Topology preservation](T)"
  energy="${energy}...\n${energy_indentation}+ 0 VP[Volume preservation](T)"
  energy="${energy}...\n${energy_indentation}+ 0 LogJac[LogJac penalty](T)"
  energy="${energy}...\n${energy_indentation}+ 0 NegJac[NegJac penalty](T)"

  # substitute values in template configuration
  c=0
  parcfg="${config}"
  while [ $c -lt ${#paropt[@]} ]; do
    case "${paropt[c]}" in
      allsym)
        allsym="${parval[c]}"
        ;;
      inclbg)
        [ "${parval[c]}" != true ] || bgpars=''
        ;;
      *)
        parcfg="${parcfg//<${paropt[c]}>/${parval[c]}}"
        ;;
    esac
    let c++
  done

  # make directories
  makedir "$pardir"
  makedir "$dofdir"
  makedir "$logdir"
  makedir "$jobdir"

  # write configuration to file
  parin="$pardir/register.cfg"
  echo -e "Energy function = $energy\n$bgpars\n\n$parcfg" > "$parin"

  # write job description
  jobdsc="$jobdir/register.condor"
  if [ $update = true ] || [ ! -f "$jobdsc" ]; then
    echo "Update: $jobdsc"
    cat > "$jobdsc" <<EOF_HEADER
universe     = vanilla
executable   = $topdir/$libdir/tools/measure-runtime
requirements = $condor_requirements
environment  = "$condor_environment"
getenv       = $condor_getenv
initialdir   = $topdir

EOF_HEADER
    for tgtid in "${tgtids[@]}"; do
    for srcid in "${srcids[@]}"; do
      dofout="$dofdir/$tgtid-$srcid.dof.gz"
      [ $force = true ] || [ ! -f "$dofout" ] || continue
      [ $allsym = true ] || [ $issym != true ] || [[ $tgtid < $srcid ]] || [ $tgtid = $srcid ] || continue
      images=()
      for chn in "${chns[@]}"; do
        imgpre="$chn/"
        imgsuf=".nii.gz"
        images=("${images[@]}" -image "'$imgdir/$imgpre$tgtid$imgsuf'" "'$imgdir/$imgpre$srcid$imgsuf'")      
      done
      cat >> "$jobdsc" <<EOF_QUEUE
arguments = "'$mirtk' register ${images[@]} -parin '$parin' -dofin '$dofin' -dofout '$dofout'"
error     = $logdir/$tgtid-$srcid.err
output    = $logdir/$tgtid-$srcid.out
log       = $logdir/$tgtid-$srcid.log
queue

EOF_QUEUE
    done; done
  else
    echo "Exists: $jobdsc"
  fi
done
