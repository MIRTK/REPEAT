#!/bin/bash

## Generate HTCondor job description file to match histograms.

print_help()
{
  echo "usage: $(basename $BASH_SOURCE) <dataset>" 1>&2
  exit 1
}

# arguments
dataset="$1"; shift

[ -n "$dataset" ] || print_help

# load settings and auxiliary functions
. "$(dirname "$BASH_SOURCE")/../../etc/settings.sh" || exit 1
[ -n "$topdir" ] || error "etc/settings.sh: topdir not set"
[ -n "$etcdir" ] || error "etc/settings.sh: etcdir not set"
[ -n "$setdir" ] || error "etc/settings.sh: setdir not set"
[ -n "$vardir" ] || error "etc/settings.sh: vardir not set"
[ -n "$mirtk"  ] || error "etc/settings.sh: mirtk not set"
[ ${mirtk:0:1} = / ] || mirtk="$topdir/$mirtk"

# change to top-level directory
run cd "$topdir"

# evaluation dataset
. "$setdir/$dataset.sh" || exit 1
[ ${#chns[@]}   -gt 0 ] || error "$setdir/$dataset.sh: chns not set"
[ ${#imgids[@]} -gt 0 ] || error "$setdir/$dataset.sh: imgids not set"

# paths
regid='affine'
regdir="$vardir/$dataset/$regid"
imgdir="$regdir/pad"
outdir="$regdir/nrm"
jobdir="$regdir/bin"
logdir="$regdir/log/match-histograms"
imgsuf=".nii.gz"

# create job description
jobdsc="$jobdir/match-histograms.condor"
if [ $update = true ] || [ ! -f "$jobdsc" ]; then
  echo "Update: $jobdsc"

  makedir "$jobdir"
  makedir "$logdir"
  makedir "$outdir"

  cat > "$jobdsc" <<EOF_HEADER
universe   = vanilla
executable = $mirtk
initialdir = $topdir

EOF_HEADER

  for chn in "${chns[@]}"; do
    makedir "$outdir/$chn"
    if [ $(is_mask "$chn") != true -a $(is_seg "$chn") != true -a $(is_prob "$chn") != true ]; then
      pad=$(get_bgvalue "$chn")
      if [ -n "$pad" -a $(is_mask "$pad") = true ]; then
        pad=$(get_padvalue "$chn")
        [ -n "$pad" ] || pad=0
      fi
      for imgid in "${imgids[@]}"; do
        outimg="$outdir/$chn/$imgid$imgsuf"
        [ $force = true ] || [ ! -f "$outimg" ] || continue
        opts=()
        [ -z "$pad" ] || opts=('-Tp' "$pad" '-Sp' "$pad")
        cat >> "$jobdsc" <<EOF_JOB
arguments = "match-histograms '$imgdir/$chn/$imgid$imgsuf' '$outimg' ${opts[@]} -threads $threads"
error     = $logdir/$imgid.err
output    = $logdir/$imgid.out
log       = $logdir/$imgid.log
queue

EOF_JOB
      done
    fi
  done
else
  echo "Exists: $jobdsc"
fi
