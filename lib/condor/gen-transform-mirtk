#!/bin/bash

## Generate HTCondor job description file to transform images using MIRTK

print_help()
{
  error "usage: $(basename $BASH_SOURCE) <dataset> <regid> [<cfgid>...]"
}

# load settings and auxiliary functions
. "$(dirname "$BASH_SOURCE")/../../etc/settings.sh" || exit 1
[ -n "$topdir" ] || error "etc/settings.sh: topdir not set"
[ -n "$etcdir" ] || error "etc/settings.sh: etcdir not set"
[ -n "$setdir" ] || error "etc/settings.sh: setdir not set"
[ -n "$vardir" ] || error "etc/settings.sh: vardir not set"
[ -n "$mirtk"  ] || error "etc/settings.sh: mirtk not set"
[ ${mirtk:0:1} = / ] || mirtk="$topdir/$mirtk"

# change to top-level directory
run cd "$topdir"

# evaluation dataset
dataset="$1"; shift
[ -n "$dataset" ] || print_help
. "$setdir/$dataset.sh" || exit 1
[ ${#mods[@]}   -gt 0 ] || error "$setdir/$dataset.sh: mods not set"
[ ${#imgids[@]} -gt 0 ] || error "$setdir/$dataset.sh: imgids not set"

# registration method
regid="$1"; shift
[ -n "$regid" ] || print_help

# include also images used to create ROIs for averaging of voxel-wise measures
mods=("${mods[@]}" "${rois[@]}")

# include image foreground masks
for chn in ${chns[@]}; do
  chnbg=$(get_bgvalue "$chn")
  if [ $(is_mask "$chn") = true ]; then
    mods=("${mods[@]}" "$chn")
  fi
done
mods=($(echo "${mods[@]}" | tr ' ' '\n' | sort -u))

# affinely align images to reference
if [ "$regid" = 'affine' ]; then

  regdir="$vardir/$dataset/affine"
  dofdir="$regdir/dof"
  jobdir="$regdir/bin"
  logdir="$regdir/log/transform"

  makedir "$jobdir"
  makedir "$logdir"

  jobdsc="$jobdir/transform.condor"
  if [ $update = true ] || [ ! -f "$jobdsc" ]; then
    echo "Update: $jobdsc"
    cat > "$jobdsc" <<EOF_HEADER
universe   = vanilla
executable = $mirtk
initialdir = $topdir

EOF_HEADER
    for mod in "${mods[@]}"; do

      outdir="$regdir/out/$mod"
      makedir "$outdir"

      imgpre="$(get_prefix "$mod")"
      imgsuf="$(get_suffix "$mod")"
      [ -n "$imgsuf" ] || imgsuf=".nii.gz"

      if [ "$(is_mask "$mod")" = true ]; then
        labels="-nn"
      elif [ "$(is_seg "$mod")" = true ]; then
        labels="-labels"
      else
        labels=""
      fi

      for imgid in "${imgids[@]}"; do
        outimg="$outdir/$imgid.nii.gz"
        [ $force = true ] || [ ! -f "$outimg" ] || continue
        cat >> "$jobdsc" <<EOF_JOB
arguments = "transform-image '$imgdir/$imgpre$imgid$imgsuf' '$outimg' -target '$imgdir/$imgpre$refid$imgsuf' -dofin '$dofdir/$imgid.dof.gz' -invert $labels -threads $threads"
error     = $logdir/$imgid-$mod.err
output    = $logdir/$imgid-$mod.out
log       = $logdir/$imgid-$mod.log
queue

EOF_JOB
      done
    done
  else
    echo "Exists: $jobdsc"
  fi

# deform images to each respective target image
else

  [ ${#tgtids[@]} -gt 0 ] || tgtids=("${imgids[@]}")
  [ ${#srcids[@]} -gt 0 ] || srcids=("${imgids[@]}")

  cfgids=("$@")
  [ ${#cfgids} -gt 0 ] || cfgids=($(get_cfgids "$dataset" "$regid"))
  [ ${#cfgids} -gt 0 ] || error "etc/settings.sh: get_cfgids is empty for $regid"
  issym="$(is_sym $regid)"

  regdir="$vardir/$dataset/$regid"
  imgdir="$vardir/$dataset/affine/out"
  imgsuf='.nii.gz'

  for cfgid in "${cfgids[@]}"; do
    dofdir="$regdir/$cfgid/dof"
    jobdir="$regdir/$cfgid/bin"
  
    makedir "$dofdir"
    makedir "$jobdir"

    for mod in "${mods[@]}"; do

      imgpre="$mod/"
      outdir="$regdir/$cfgid/out/$mod"
      logdir="$regdir/$cfgid/log/transform-$mod"

      makedir "$outdir"
      makedir "$logdir"

      jobdsc="$jobdir/transform-$mod.condor"
      if [ $update = true ] || [ ! -f "$jobdsc" ]; then
        echo "Update: $jobdsc"
        cat > "$jobdsc" <<EOF_HEADER
universe   = vanilla
executable = $mirtk
initialdir = $topdir

EOF_HEADER

        if [ "$(is_seg "$mod")" = true -o "$(is_mask "$mod")" = true ]; then
          labels="-labels"
        else
          labels=""
        fi

        for tgtid in "${tgtids[@]}"; do
        for srcid in "${srcids[@]}"; do
          outimg="$outdir/$srcid-$tgtid.nii.gz"
          [ $force = true ] || [ ! -f "$outimg" ] || continue
          if [ ! -f "$dofdir/$tgtid-$srcid.dof.gz" ] && [ $issym = true ] && [[ $tgtid > $srcid ]]; then
            cat >> "$jobdsc" <<EOF_JOB
arguments = "transform-image '$imgdir/$imgpre$srcid$imgsuf' '$outimg' -target '$imgdir/$imgpre$tgtid$imgsuf' -dofin '$dofdir/$srcid-$tgtid.dof.gz' -invert $labels -threads $threads"
error     = $logdir/$srcid-$tgtid.err
output    = $logdir/$srcid-$tgtid.out
log       = $logdir/$srcid-$tgtid.log
queue

EOF_JOB
          else
            cat >> "$jobdsc" <<EOF_JOB
arguments = "transform-image '$imgdir/$imgpre$srcid$imgsuf' '$outimg' -target '$imgdir/$imgpre$tgtid$imgsuf' -dofin '$dofdir/$tgtid-$srcid.dof.gz' $labels -threads $threads"
error     = $logdir/$srcid-$tgtid.err
output    = $logdir/$srcid-$tgtid.out
log       = $logdir/$srcid-$tgtid.log
queue

EOF_JOB
          fi
        done; done
      else
        echo "Exists: $jobdsc"
      fi
    done
  done

fi
