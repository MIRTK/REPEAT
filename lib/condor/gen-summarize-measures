#!/bin/bash

## Generate HTCondor job description file to average voxel-wise quality measures

print_help()
{
  error "usage: $(basename $BASH_SOURCE) <dataset> <regid> [<cfgid>...]"
}

# load settings and auxiliary functions
. "$(dirname "$BASH_SOURCE")/../../etc/settings.sh" || exit 1
[ -n "$topdir" ] || error "etc/settings.sh: topdir not set"
[ -n "$etcdir" ] || error "etc/settings.sh: etcdir not set"
[ -n "$setdir" ] || error "etc/settings.sh: setdir not set"
[ -n "$vardir" ] || error "etc/settings.sh: vardir not set"
[ -n "$csvdir" ] || error "etc/settings.sh: csvdir not set"
[ -n "$mirtk"  ] || error "etc/settings.sh: mirtk not set"
[ ${mirtk:0:1} = / ] || mirtk="$topdir/$mirtk"

# change to top-level directory
run cd "$topdir"

# evaluation dataset
dataset="$1"; shift
[ -n "$dataset" ] || print_help
. "$setdir/$dataset.sh" || exit 1
[ ${#rois[@]}   -gt 0 ] || error "$setdir/$dataset.sh: rois not set"
[ ${#imgids[@]} -gt 0 ] || error "$setdir/$dataset.sh: imgids not set"

# registration method
regid="$1"; shift
[ -n "$regid" ] || print_help
issym="$(is_sym $regid)"

if [ $evlice = true ]; then
  if [ ${#tgtids[@]} -ne ${#srcids} ]; then
    echo "Info: Skipping evaluation of inverse consistency error because not all srcimgs are used as tgtimgs."
  elif [ $issym = true -a $allsym != true ]; then
    echo "Info: Skipping evaluation of inverse consistency error because allsym not 'true'."
  fi
  evlice=false
fi
if [ $evlmte = true -a ${#tgtids[@]} -ne ${#srcids} ]; then
  echo "Info: Skipping evaluation of mean transitivity error because not all srcimgs are used as tgtimgs."
  evlmte=false
fi

# ------------------------------------------------------------------------------
# average quality measures of affine pre-alignment
if [ "$regid" = 'affine' ]; then

  # TODO
  false

# ------------------------------------------------------------------------------
# average quality measures of pairwise deformations
else

  [ ${#tgtids[@]} -gt 0 ] || tgtids=("${imgids[@]}")
  [ ${#srcids[@]} -gt 0 ] || srcids=("${imgids[@]}")

  cfgids=("$@")
  [ ${#cfgids} -gt 0 ] || cfgids=($(get_cfgids "$regid"))
  [ ${#cfgids} -gt 0 ] || error "etc/settings.sh: get_cfgids is empty for $regid"

  regdir="$vardir/$dataset/$regid"

  for cfgid in "${cfgids[@]}"; do

    jobdir="$regdir/$cfgid/bin"
    outdir="$csvdir/$dataset/$regid/$cfgid"

    makedir "$jobdir"
    makedir "$outdir"

    # calculate statistics of Jacobian determinant values
    if [ "$evljac" = true ]; then
      jobdsc="$jobdir/summarize-dof-logjac.condor"
      if [ $update = true ] || [ ! -f "$jobdsc" ]; then

        logdir="$regdir/$cfgid/log/summarize-dof-logjac"
        makedir "$logdir"

        echo "Update: $jobdsc"
        cat > "$jobdsc" <<EOF_HEADER
universe    = vanilla
executable  = $topdir/$libdir/tools/print-logjac-table
initialdir  = $topdir

EOF_HEADER
        for tgtid in "${tgtids[@]}"; do
          outcsv="$outdir/$tgtid-logjac.csv"
          [ $force = true ] || [ ! -f "$outcsv" ] || continue
          cat >> "$jobdsc" <<EOF_JOB
arguments = "'$dataset' '$regid' '$cfgid' '$tgtid'"
error     = $logdir/$tgtid.err
output    = $outcsv
log       = $logdir/$tgtid.log
queue

EOF_JOB
        done
      fi
    fi

    # average voxel-wise measures
    jobdsc="$jobdir/average-measures.condor"
    if [ $update = true ] || [ ! -f "$jobdsc" ]; then

      imgdir="$vardir/$dataset/affine/out"
      roidir="$regdir/$cfgid/roi"
      logdir="$regdir/$cfgid/log/average-measures"

      makedir "$logdir"

      echo "Update: $jobdsc"
      cat > "$jobdsc" <<EOF_HEADER
universe     = vanilla
executable   = $mirtk
requirements = $condor_requirements
environment  = "$condor_environment"
getenv       = $condor_getenv
initialdir   = $topdir

EOF_HEADER

      for tgtid in "${tgtids[@]}"; do

        outcsv="$outdir/$tgtid-mean.csv"
        stdcsv="$outdir/$tgtid-sdev.csv"
        numcsv="$outdir/$tgtid-size.csv"
        [ $force = true ] || [ ! -f "$outcsv" ] || [ ! -f "$stdcsv" ] || [ ! -f "$numcsv" ] || continue

        val_names=()
        val_paths=()
        if [ $evlice = true ]; then
          measure="mice"
          val_path="$regdir/$cfgid/evl/dof/$measure/$tgtid.nii.gz"
          val_names=("${val_names[@]}" "'${measure}'")
          val_paths=("${val_paths[@]}" "'$val_path'")
        fi
        if [ $evlmte = true ]; then
          measure="mte"
          val_path="$regdir/$cfgid/evl/dof/$measure/$tgtid.nii.gz"
          val_names=("${val_names[@]}" "'${measure}'")
          val_paths=("${val_paths[@]}" "'$val_path'")
        fi
        for mod in "${mods[@]}"; do
          for measure in $(get_measures "$mod"); do
            [ $measure != 'overlap' ] || measure='dsc'
            [ $(is_overlap_measure $measure) != true ] || continue
            val_path="$regdir/$cfgid/evl/$mod/$measure/$tgtid.nii.gz"
            val_names=("${val_names[@]}" "'${mod}_${measure}'")
            val_paths=("${val_paths[@]}" "'$val_path'")
          done
        done

        roi_names=()
        roi_paths=()
        for roi in "${rois[@]}"; do
          if [ $(is_seg "$roi") = true ]; then
            for roi_path in $(find "$roidir/$roi" -name "$tgtid-l*.nii.gz" | sort); do
              label="$(basename "$roi_path")"
              label=${roi_path%.nii.gz}
              label=${label/*-l}
              roi_names=("${roi_names[@]}" "'$roi=$label'")
              roi_paths=("${roi_paths[@]}" "'$roi_path'")
            done
          else
            roi_path="$imgdir/$roi/$tgtid.nii.gz"
            roi_names=("${roi_names[@]}" "'$roi'")
            roi_paths=("${roi_paths[@]}" "'$roi_path'")
          fi
        done

        cat >> "$jobdsc" <<EOF_JOB
arguments = "average-measure ${val_paths[@]} -name ${val_names[@]} -roi ${roi_paths[@]} -roi-name ${roi_names[@]} -mean '$outcsv' -stdev '$stdcsv' -size '$numcsv' -digits 5 -header"
error     = $logdir/$tgtid.err
output    = $logdir/$tgtid.out
log       = $logdir/$tgtid.log
queue

EOF_JOB

      done # for tgtid
    else
      echo "Exists: $jobdsc"
    fi
  done # for cfgid
fi # case regid
