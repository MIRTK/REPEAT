#!/bin/bash

## Generate HTCondor job description file to average voxel-wise quality measures

print_help()
{
  echo "usage: $(basename $BASH_SOURCE) <dataset> <regid> [<cfgid>...]" 1>&2
  exit 1
}

# arguments
dataset="$1"; shift
regid="$1"; shift

[ -n "$dataset" -a -n "$regid" ] || print_help

# load settings and auxiliary functions
. "$(dirname "$BASH_SOURCE")/../../etc/settings.sh" || exit 1
[ -n "$topdir" ] || error "etc/settings.sh: topdir not set"
[ -n "$etcdir" ] || error "etc/settings.sh: etcdir not set"
[ -n "$setdir" ] || error "etc/settings.sh: setdir not set"
[ -n "$vardir" ] || error "etc/settings.sh: vardir not set"
[ -n "$csvdir" ] || error "etc/settings.sh: csvdir not set"
[ -n "$mirtk"  ] || error "etc/settings.sh: mirtk not set"
[ ${mirtk:0:1} = / ] || mirtk="$topdir/$mirtk"

# change to top-level directory
run cd "$topdir"

# evaluation dataset
. "$setdir/$dataset.sh" || exit 1
[ ${#rois[@]}   -gt 0 ] || error "$setdir/$dataset.sh: rois not set"
[ ${#imgids[@]} -gt 0 ] || error "$setdir/$dataset.sh: imgids not set"

# registration method
issym="$(is_sym "$regid")"
extdof="$(use_existing_dofs "$dataset" "$regid")"
extout="$(use_existing_imgs "$dataset" "$regid")"

# disable evaluation measures that cannot be computed
if [ $evltime = true ]; then
  if [ "$extdof" = true -o "$extout" = true ]; then
    echo "Info: Skipping evaluation of runtime because transformations/deformed images were pre-computed."
    evltime=false
  fi
fi
if [ $evljac = true ]; then
  if [ "$extdof" = false -a "$extout" = true ]; then
    echo "Info: Skipping evaluation of Jacobian determinants because only pre-computed deformed images are available."
    evljac=false
  fi
fi
if [ $evlice = true ]; then
  if [ "$extdof" = false -a "$extout" = true ]; then
    echo "Info: Skipping evaluation of inverse consistency error because only pre-computed deformed images are available."
    evlice=false
  elif [ ${#tgtids[@]} -ne ${#srcids[@]} ]; then
    echo "Info: Skipping evaluation of inverse consistency error because not all srcimgs are used as tgtimgs."
    evlice=false
  elif [ $issym = true -a $allsym != true ]; then
    echo "Info: Skipping evaluation of inverse consistency error because allsym not 'true'."
    evlice=false
  fi
fi
if [ $evlmte = true  ]; then
  if [ "$extdof" = false -a "$extout" = true ]; then
    echo "Info: Skipping evaluation of mean transitivity error because only pre-computed deformed images are available."
    evlmte=false
  elif [ ${#tgtids[@]} -ne ${#srcids[@]} ]; then
    echo "Info: Skipping evaluation of mean transitivity error because not all srcimgs are used as tgtimgs."
    evlmte=false
  fi
fi

# ------------------------------------------------------------------------------
# average quality measures of affine pre-alignment
if [ "$regid" = 'affine' ]; then

  cfgids=('')
  tgtids=("${imgids[@]}")
  srcids=("${imgids[@]}")
  evljac=false
  evlice=false
  evlmte=false
  evltime=false

# ------------------------------------------------------------------------------
# average quality measures of pairwise deformations
else

  cfgids=("$@")
  [ ${#cfgids}    -gt 0 ] || cfgids=($(get_cfgids "$dataset" "$regid"))
  [ ${#cfgids}    -gt 0 ] || error "get_cfgids is empty for $regid"
  [ ${#tgtids[@]} -gt 0 ] || tgtids=("${imgids[@]}")
  [ ${#srcids[@]} -gt 0 ] || srcids=("${imgids[@]}")

fi

# ------------------------------------------------------------------------------
# for each configuration... (single iteration for regid='affine')
for cfgid in "${cfgids[@]}"; do

  regdir="$vardir/$dataset/$regid"
  outdir="$csvdir/$dataset/$regid"
  if [ -n "$cfgid" ]; then
    regdir="$regdir/$cfgid"
    outdir="$outdir/$cfgid"
  fi
  jobdir="$regdir/bin"

  makedir "$jobdir"
  makedir "$outdir"

  # create table with runtime measurements
  if [ "$evltime" = true ]; then
    jobdsc="$jobdir/summarize-runtime.condor"
    if [ $update = true ] || [ ! -f "$jobdsc" ]; then

      logdir="$regdir/log/summarize-runtime"
      makedir "$logdir"

      echo "Update: $jobdsc"
      cat > "$jobdsc" <<EOF_HEADER
universe    = vanilla
executable  = $topdir/$libdir/tools/print-runtime-table
initialdir  = $topdir

EOF_HEADER
      for tgtid in "${tgtids[@]}"; do
        outcsv="$outdir/$tgtid-time.csv"
        [ $force = true ] || [ ! -f "$outcsv" ] || continue
        cat >> "$jobdsc" <<EOF_JOB
arguments = "'$dataset' '$regid' '$cfgid' '$tgtid'"
error     = $logdir/$tgtid.err
output    = $outcsv
log       = $logdir/$tgtid.log
queue

EOF_JOB
      done
    fi
  fi

  # calculate statistics of Jacobian determinant values
  if [ "$evljac" = true ]; then
    jobdsc="$jobdir/summarize-dof-logjac.condor"
    if [ $update = true ] || [ ! -f "$jobdsc" ]; then

      logdir="$regdir/log/summarize-dof-logjac"
      makedir "$logdir"

      echo "Update: $jobdsc"
      cat > "$jobdsc" <<EOF_HEADER
universe    = vanilla
executable  = $topdir/$libdir/tools/print-logjac-table
initialdir  = $topdir

EOF_HEADER
      for tgtid in "${tgtids[@]}"; do
        outcsv="$outdir/$tgtid-logjac.csv"
        [ $force = true ] || [ ! -f "$outcsv" ] || continue
        cat >> "$jobdsc" <<EOF_JOB
arguments = "'$dataset' '$regid' '$cfgid' '$tgtid'"
error     = $logdir/$tgtid.err
output    = $outcsv
log       = $logdir/$tgtid.log
queue

EOF_JOB
      done
    fi
  fi

  # average voxel-wise measures
  jobdsc="$jobdir/average-measures.condor"
  if [ $update = true ] || [ ! -f "$jobdsc" ]; then

    if [ "$extdof" = true -o "$extout" = true ]; then
      roidir="$vardir/$dataset/shared/roi"
    else
      roidir="$vardir/$dataset/affine/roi"
    fi
    logdir="$regdir/log/average-measures"

    makedir "$logdir"

    echo "Update: $jobdsc"
    cat > "$jobdsc" <<EOF_HEADER
universe     = vanilla
executable   = $mirtk
requirements = $condor_requirements
environment  = "$condor_environment"
getenv       = $condor_getenv
initialdir   = $topdir

EOF_HEADER

    if [ $regid = 'affine' ]; then

      outcsv="$outdir/mean.csv"
      stdcsv="$outdir/sdev.csv"
      numcsv="$outdir/size.csv"
      [ $force = true ] || [ ! -f "$outcsv" ] || [ ! -f "$stdcsv" ] || [ ! -f "$numcsv" ] || continue

      val_names=()
      val_paths=()
      for mod in "${mods[@]}"; do
        for measure in $(get_measures "$mod"); do
          [ -n "$measure" ] || continue
          [ $measure != 'overlap' ] || measure='dsc'
          [ $(is_overlap_measure $measure) != true ] || continue
          val_path="$regdir/evl/$mod/$measure.nii.gz"
          val_names=("${val_names[@]}" "'${mod}_${measure}'")
          val_paths=("${val_paths[@]}" "'$val_path'")
        done
      done

      roi_names=()
      roi_paths=()
      for roi in "${rois[@]}"; do
        if [ "$(is_mask "$roi")" = true -o "$(is_prob "$roi")" = true ]; then
            roi_path="$roidir/$roi/$refid.nii.gz"
            roi_names=("${roi_names[@]}" "'$roi'")
            roi_paths=("${roi_paths[@]}" "'$roi_path'")
        elif [ $(is_seg "$roi") = true ]; then
          for roi_path in $(find "$roidir/$roi" -name "$refid-l*.nii.gz" | sort); do
            label="$(basename "$roi_path")"
            label=${roi_path%.nii.gz}
            label=${label/*-l}
            roi_names=("${roi_names[@]}" "'$roi=$label'")
            roi_paths=("${roi_paths[@]}" "'$roi_path'")
          done
        else
          bgvalue=$(get_bgvalue "$roi")
          if [ -n "$bgvalue" ]; then
            if [ "$(is_mask "$bgvalue")" = true ]; then
              roi="$bgvalue"
              roi_name="$roi"
            else
              roi_name="$roi!=$bgvalue"
            fi
          else
            roi_name="$roi"
          fi
          roi_path="$roidir/$roi/$refid.nii.gz"
          roi_names=("${roi_names[@]}" "'$roi_name'")
          roi_paths=("${roi_paths[@]}" "'$roi_path'")
        fi
      done

      cat >> "$jobdsc" <<EOF_JOB
arguments = "average-measure ${val_paths[@]} -name ${val_names[@]} -roi ${roi_paths[@]} -roi-name ${roi_names[@]} -mean '$outcsv' -stdev '$stdcsv' -size '$numcsv' -digits 5 -header"
error     = $logdir/$refid.err
output    = $logdir/$refid.out
log       = $logdir/$refid.log
queue

EOF_JOB

    else

      for tgtid in "${tgtids[@]}"; do

        outcsv="$outdir/$tgtid-mean.csv"
        stdcsv="$outdir/$tgtid-sdev.csv"
        numcsv="$outdir/$tgtid-size.csv"
        [ $force = true ] || [ ! -f "$outcsv" ] || [ ! -f "$stdcsv" ] || [ ! -f "$numcsv" ] || continue

        val_names=()
        val_paths=()
        if [ $evlice = true ]; then
          measure="mice"
          val_path="$regdir/evl/dof/$measure/$tgtid.nii.gz"
          val_names=("${val_names[@]}" "'${measure}'")
          val_paths=("${val_paths[@]}" "'$val_path'")
        fi
        if [ $evlmte = true ]; then
          measure="mte"
          val_path="$regdir/evl/dof/$measure/$tgtid.nii.gz"
          val_names=("${val_names[@]}" "'${measure}'")
          val_paths=("${val_paths[@]}" "'$val_path'")
        fi
        for mod in "${mods[@]}"; do
          for measure in $(get_measures "$mod"); do
            [ -n "$measure" ] || continue
            [ $measure != 'overlap' ] || measure='dsc'
            [ $(is_overlap_measure $measure) != true ] || continue
            val_path="$regdir/evl/$mod/$measure/$tgtid.nii.gz"
            val_names=("${val_names[@]}" "'${mod}_${measure}'")
            val_paths=("${val_paths[@]}" "'$val_path'")
          done
        done

        roi_names=()
        roi_paths=()
        for roi in "${rois[@]}"; do
          if [ "$(is_mask "$roi")" = true -o "$(is_prob "$roi")" = true ]; then
            if [ "$extdof" = true ]; then
              roisuf="$(get_suffix "$roi")"
              roi_path="$roidir/$roi/$tgtid$roisuf"
            else
              roi_path="$roidir/$roi/$tgtid.nii.gz"
            fi
            roi_names=("${roi_names[@]}" "'$roi'")
            roi_paths=("${roi_paths[@]}" "'$roi_path'")
          elif [ "$(is_seg "$roi")" = true ]; then
            for roi_path in $(find "$roidir/$roi" -name "$tgtid-l*.nii.gz" | sort); do
              label="$(basename "$roi_path")"
              label=${roi_path%.nii.gz}
              label=${label/*-l}
              roi_names=("${roi_names[@]}" "'$roi=$label'")
              roi_paths=("${roi_paths[@]}" "'$roi_path'")
            done
          else
            bgvalue=$(get_bgvalue "$roi")
            if [ -n "$bgvalue" ]; then
              if [ "$(is_mask "$bgvalue")" = true ]; then
                roi="$bgvalue"
                roi_name="$roi"
              else
                roi_name="$roi!=$bgvalue"
              fi
            else
              roi_name="$roi"
            fi
            roi_path="$roidir/$roi/$tgtid.nii.gz"
            roi_names=("${roi_names[@]}" "'$roi_name'")
            roi_paths=("${roi_paths[@]}" "'$roi_path'")
          fi
        done

        cat >> "$jobdsc" <<EOF_JOB
arguments = "average-measure ${val_paths[@]} -name ${val_names[@]} -roi ${roi_paths[@]} -roi-name ${roi_names[@]} -mean '$outcsv' -stdev '$stdcsv' -size '$numcsv' -digits 5 -header"
error     = $logdir/$tgtid.err
output    = $logdir/$tgtid.out
log       = $logdir/$tgtid.log
queue

EOF_JOB

      done # for tgtid
    fi # regid = affine
  else
    echo "Exists: $jobdsc"
  fi
done # for cfgid
