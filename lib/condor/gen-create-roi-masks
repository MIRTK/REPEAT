#!/bin/bash

## Generate HTCondor job description file to transform/create
## binary or probabilistic ROI masks used to computed weighted
## average of voxel-wise quality measures for each ROI
##
## Images must first be transformed to each target image using
## the lib/condor/gen-transform-image job description. When a given
## ROI mask is a hard segmentation, i.e., a label image, a
## separate probabilistic ROI mask is created by this the job
## description created by this script for each positive label.

print_help()
{
  error "usage: $(basename $BASH_SOURCE) <dataset> <regid> [<cfgid>...]"
}

# load settings and auxiliary functions
. "$(dirname "$BASH_SOURCE")/../../etc/settings.sh" || exit 1
[ -n "$topdir" ] || error "etc/settings.sh: topdir not set"
[ -n "$etcdir" ] || error "etc/settings.sh: etcdir not set"
[ -n "$setdir" ] || error "etc/settings.sh: setdir not set"
[ -n "$vardir" ] || error "etc/settings.sh: vardir not set"
[ -n "$mirtk"  ] || error "etc/settings.sh: mirtk not set"
[ ${mirtk:0:1} = / ] || mirtk="$topdir/$mirtk"

# change to top-level directory
run cd "$topdir"

# evaluation dataset
dataset="$1"; shift
[ -n "$dataset" ] || print_help
. "$setdir/$dataset.sh" || exit 1
[ ${#rois[@]}   -gt 0 ] || error "$setdir/$dataset.sh: rois not set"
[ ${#imgids[@]} -gt 0 ] || error "$setdir/$dataset.sh: imgids not set"

# registration method
regid="$1"; shift
[ -n "$regid" ] || print_help

# ------------------------------------------------------------------------------
# create ROI masks for evaluation of affine pre-alignment
if [ "$regid" = 'affine' ]; then

  # TODO
  false

# ------------------------------------------------------------------------------
# create ROI masks for evaluation of pairwise deformations
else

  [ ${#tgtids[@]} -gt 0 ] || tgtids=("${imgids[@]}")
  [ ${#srcids[@]} -gt 0 ] || srcids=("${imgids[@]}")

  cfgids=("$@")
  [ ${#cfgids} -gt 0 ] || cfgids=($(get_cfgids "$regid"))
  [ ${#cfgids} -gt 0 ] || error "etc/settings.sh: get_cfgids is empty for $regid"

  regdir="$vardir/$dataset/$regid"
  imgdir="$vardir/$dataset/affine/out"
  imgsuf=".nii.gz"

  for cfgid in "${cfgids[@]}"; do

    pardir="$regdir/$cfgid/etc"
    jobdir="$regdir/$cfgid/bin"

    makedir "$pardir"
    makedir "$jobdir"

    for roi in "${rois[@]}"; do
      if [ "$(is_seg "$roi")" = true ]; then
        jobdsc="$jobdir/create-$roi-masks.condor"
        if [ $update = true ] || [ ! -f "$jobdsc" ]; then
          echo "Update: $jobdsc"

          imgpre="$roi/"
          outdir="$regdir/$cfgid/roi/$roi"
          logdir="$regdir/$cfgid/log/create-$roi-masks"

          makedir "$outdir"
          makedir "$logdir"

          cat > "$jobdsc" <<EOF_HEADER
universe   = vanilla
executable = $mirtk
initialdir = $topdir

EOF_HEADER
          for tgtid in "${tgtids[@]}"; do
            outimg="$outdir/${tgtid}-l%02d.nii.gz"
            [ $force = true ] || [ $(find "$outdir" -name "$tgtid-l*.nii.gz" | wc -l) -eq 0 ] || continue
            cat >> "$jobdsc" <<EOF_JOB
arguments = "average-images '$outimg' -image '$imgdir/$imgpre$tgtid$imgsuf' -target '$imgdir/$imgpre$tgtid$imgsuf' -labels -dtype uchar -v"
error     = $logdir/$tgtid.err
output    = $logdir/$tgtid.out
log       = $logdir/$tgtid.log
queue

EOF_JOB
          done
        else
          echo "Exists: $jobdsc"
        fi
      fi
    done
  done

fi
