#!/bin/bash

## Generate HTCondor job description file to create binary or
## probabilistic ROI masks used to computed weighted average
## of voxel-wise quality measures for each ROI
##
## Images must first be transformed to each target image using
## the lib/condor/gen-transform-mirtk job description. When a given
## ROI mask is a hard segmentation, i.e., a label image, a
## separate binary ROI mask is created by the job description
## created by this script for each positive label.

print_help()
{
  echo "usage: $(basename $BASH_SOURCE) <dataset> [<regid>]" 1>&2
  exit 1
}

# arguments
dataset="$1"; shift
regid="${1:-affine}"; shift

[ -n "$dataset" -a -n "$regid" ] || print_help

# load settings and auxiliary functions
. "$(dirname "$BASH_SOURCE")/../../etc/settings.sh" || exit 1
[ -n "$topdir" ] || error "etc/settings.sh: topdir not set"
[ -n "$etcdir" ] || error "etc/settings.sh: etcdir not set"
[ -n "$setdir" ] || error "etc/settings.sh: setdir not set"
[ -n "$vardir" ] || error "etc/settings.sh: vardir not set"
[ -n "$mirtk"  ] || error "etc/settings.sh: mirtk not set"
[ ${mirtk:0:1} = / ] || mirtk="$topdir/$mirtk"

# change to top-level directory
run cd "$topdir"

# evaluation dataset
. "$setdir/$dataset.sh" || exit 1
[ ${#rois[@]}   -gt 0 ] || error "$setdir/$dataset.sh: rois not set"
[ ${#imgids[@]} -gt 0 ] || error "$setdir/$dataset.sh: imgids not set"
[ ${#tgtids[@]} -gt 0 ] || tgtids=("${imgids[@]}")

extdof="$(has_existing_dofs "$regid")"
if [ "$extdof" = true ]; then
  regdir="$vardir/$dataset/shared"
else
  regid='affine'
  regdir="$vardir/$dataset/$regid"
fi

regdir="$vardir/$dataset/$regid"
jobdir="$regdir/bin"

for roi in "${rois[@]}"; do

  if [ "$extdof" = true ]; then
    [ -n "$imgdir" ] || error "$setdir/$dataset.sh: imgdir not set"
    imgpre="$(get_prefix "$roi")"
    imgsuf="$(get_suffix "$roi")"
  else
    imgdir="$regdir/out"
    imgpre="$roi/"
    imgsuf=".nii.gz"
  fi

  jobdsc="$jobdir/create-$roi-masks.condor"
  logdir="$regdir/log/create-$roi-masks"
  outdir="$regdir/roi/$roi"

  # mask/probability map resampled already by gen-transform-* jobs
  if [ "$(is_mask "$roi")" = true -o "$(is_prob "$roi")" = true ]; then

    if [ ! -L "$outdir" ]; then
      if [ "$extdof" = true ]; then
        makedir "$outdir"
        for imgid in "${imgids[@]}"; do
          run ln -s "$imgdir/$imgpre$imgid$imgsuf" "$outdir/$imgid$imgsuf"
        done
      else
        makedir "$(dirname "$outdir")"
        run ln -s "../out/$roi" "$outdir"
      fi
    fi

  # create separate binary mask for each (positive) label
  elif [ "$(is_seg "$roi")" = true ]; then

    if [ $update = true ] || [ ! -f "$jobdsc" ]; then
      echo "Update: $jobdsc"

      makedir "$outdir"
      makedir "$jobdir"
      makedir "$logdir"

      cat > "$jobdsc" <<EOF_HEADER
universe   = vanilla
executable = $mirtk
initialdir = $topdir

EOF_HEADER
      for tgtid in "${tgtids[@]}"; do
        outimg="$outdir/${tgtid}-l%02d.nii.gz"
        [ $force = true ] || [ $(find "$outdir" -name "$tgtid-l*.nii.gz" | wc -l) -eq 0 ] || continue
        cat >> "$jobdsc" <<EOF_JOB
arguments = "average-images '$outimg' -image '$imgdir/$imgpre$tgtid$imgsuf' -target '$imgdir/$imgpre$tgtid$imgsuf' -labels -dtype uchar -v -threads $threads"
error     = $logdir/$tgtid.err
output    = $logdir/$tgtid.out
log       = $logdir/$tgtid.log
queue

EOF_JOB
      done
    else
      echo "Exists: $jobdsc"
    fi

  # create binary mask from intensity image foreground region
  else

    if [ $update = true ] || [ ! -f "$jobdsc" ]; then
      echo "Update: $jobdsc"

      makedir "$jobdir"
      makedir "$logdir"

      cat > "$jobdsc" <<EOF_HEADER
universe   = vanilla
executable = $mirtk
initialdir = $topdir

EOF_HEADER
      for tgtid in "${tgtids[@]}"; do
        outimg="$outdir/$tgtid.nii.gz"
        [ $force = true ] || [ $(find "$outdir" -name "$tgtid-l*.nii.gz" | wc -l) -eq 0 ] || continue
        bgvalue=$(get_bgvalue "$roi")
        if [ -n "$bgvalue" ]; then
          if [ "$(is_mask "$bgvalue")" = true ]; then
            mask="-mask $imgdir/$bgvalue/$tgtid$imgsuf"
          else
            mask="-mask $bgvalue"
          fi
        else
          mask=''
        fi
        cat >> "$jobdsc" <<EOF_JOB
arguments = "calculate-element-wise '$imgdir/$imgpre$tgtid$imgsuf' $mask -set 1 -pad 0 -o '$outimg' binary -threads $threads"
error     = $logdir/$tgtid.err
output    = $logdir/$tgtid.out
log       = $logdir/$tgtid.log
queue

EOF_JOB
      done
    else
      echo "Exists: $jobdsc"
    fi

  fi
done
