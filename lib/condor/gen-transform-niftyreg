#!/bin/bash

## Generate HTCondor job description file to transform images using NiftyReg

print_help()
{
  echo "usage: $(basename $BASH_SOURCE) <dataset> <regid> [<cfgid>...]" 1>&2
  exit 1
}

# arguments
dataset="$1"; shift
regid="$1"; shift

[ -n "$dataset" -a -n "$regid" ] || print_help

# load settings and auxiliary functions
. "$(dirname "$BASH_SOURCE")/../../etc/settings.sh" || exit 1
[ -n "$topdir" ] || error "etc/settings.sh: topdir not set"
[ -n "$etcdir" ] || error "etc/settings.sh: etcdir not set"
[ -n "$setdir" ] || error "etc/settings.sh: setdir not set"
[ -n "$vardir" ] || error "etc/settings.sh: vardir not set"
[ -n "$niftyreg"  ] || error "etc/settings.sh: niftyreg not set"
[ ${niftyreg:0:1} = / ] || niftyreg="$topdir/$niftyreg"

args=()
version="${regid/*-}"
[ $(is_version "$version") = true ] || version=''
if [ -n "$version" ]; then
  niftyreg="$niftyreg-$version"
  [ -f "$niftyreg/bin/reg_resample" ] || error "NiftyReg version $version not found in '$niftyreg'"
  if [ "$version" != '1.3.9' ]; then
    if [ -n "$threads" -a $threads -ge 0 ]; then
      [ $threads -gt 0 ] || threads=1
      args=("${args[@]}" -omp "$threads")
    fi
  fi
fi

# change to top-level directory
run cd "$topdir"

# evaluation dataset
. "$setdir/$dataset.sh" || exit 1
[ ${#mods[@]}   -gt 0 ] || error "$setdir/$dataset.sh: mods not set"
[ ${#imgids[@]} -gt 0 ] || error "$setdir/$dataset.sh: imgids not set"

# registration method
dofsuf=$(get_dofsuf "$regid")

# affinely align images to reference
if [ "$regid" = 'affine' ]; then

  regdir="$vardir/$dataset/affine"
  dofdir="$regdir/dof"
  jobdir="$regdir/bin"
  logdir="$regdir/log/transform"

  makedir "$jobdir"
  makedir "$logdir"

  jobdsc="$jobdir/transform.condor"
  if [ $update = true ] || [ ! -f "$jobdsc" ]; then
    echo "Update: $jobdsc"
    cat > "$jobdsc" <<EOF_HEADER
universe    = vanilla
environment = LD_LIBRARY_PATH="$niftyreg/lib:$LD_LIBRARY_PATH" DYLD_LIBRARY_PATH="$niftyreg/lib:$DYLD_LIBRARY_PATH"
executable  = $niftyreg/bin/reg_resample
initialdir  = $topdir

EOF_HEADER
    for mod in "${mods[@]}"; do

      outdir="$regdir/out/$mod"
      makedir "$outdir"

      imgpre="$(get_prefix "$mod")"
      imgsuf="$(get_suffix "$mod")"
      [ -n "$imgsuf" ] || imgsuf=".nii.gz"

      if [ "$(is_seg "$mod")" = true -o "$(is_mask "$mod")" = true ]; then
        interp="-NN"
      else
        interp="-LIN"
      fi

      for imgid in "${imgids[@]}"; do
        outimg="$outdir/$imgid.nii.gz"
        [ $force = true ] || [ ! -f "$outimg" ] || continue
        if [ ! -f "$dofdir/$imgid.txt" ] && [ -f "$dofdir/$imgid.dof.gz" ]; then
          run "$mirtk" convert-dof "$dofdir/$imgid.dof.gz" "$dofdir/$imgid.txt" -output-format 'aladin'
        fi
        cat >> "$jobdsc" <<EOF_JOB
arguments = "-flo '$imgdir/$imgpre$imgid$imgsuf' -res '$outimg' -ref '$imgdir/$imgpre$refid$imgsuf' -aff '$dofdir/$imgid.txt' $interp ${args[@]}"
error     = $logdir/$imgid.err
output    = $logdir/$imgid.out
log       = $logdir/$imgid.log
queue

EOF_JOB
      done
    done
  else
    echo "Exists: $jobdsc"
  fi

# deform images to each respective target image
else

  [ ${#tgtids[@]} -gt 0 ] || tgtids=("${imgids[@]}")
  [ ${#srcids[@]} -gt 0 ] || srcids=("${imgids[@]}")

  cfgids=("$@")
  [ ${#cfgids} -gt 0 ] || cfgids=($(get_cfgids "$dataset" "$regid"))
  [ ${#cfgids} -gt 0 ] || cfgids=('')
  issym="$(is_sym $regid)"

  regdir="$vardir/$dataset/$regid"
  imgdir="$vardir/$dataset/affine/out"
  imgsuf='.nii.gz'

  for cfgid in "${cfgids[@]}"; do

    if [ -n "$cfgid" ]; then
      dofdir="$regdir/$cfgid/dof"
      jobdir="$regdir/$cfgid/bin"
    else
      dofdir="$regdir/dof"
      jobdir="$regdir/bin"
    fi
  
    makedir "$dofdir"
    makedir "$jobdir"

    for mod in "${mods[@]}"; do

      imgpre="$mod/"
      if [ -n "$cfgid" ]; then
        outdir="$regdir/$cfgid/out/$mod"
        logdir="$regdir/$cfgid/log/transform-$mod"
      else
        outdir="$regdir/out/$mod"
        logdir="$regdir/log/transform-$mod"
      fi

      makedir "$outdir"
      makedir "$logdir"

      jobdsc="$jobdir/transform-$mod.condor"
      if [ $update = true ] || [ ! -f "$jobdsc" ]; then
        echo "Update: $jobdsc"
        cat > "$jobdsc" <<EOF_HEADER
universe    = vanilla
environment = LD_LIBRARY_PATH="$niftyreg/lib:$LD_LIBRARY_PATH" DYLD_LIBRARY_PATH="$niftyreg/lib:$DYLD_LIBRARY_PATH"
executable  = $niftyreg/bin/reg_resample
initialdir  = $topdir

EOF_HEADER

        if [ "$(is_seg "$mod")" = true -o "$(is_mask "$mod")" = true ]; then
          interp="-NN"
        else
          interp="-LIN"
        fi

        for tgtid in "${tgtids[@]}"; do
        for srcid in "${srcids[@]}"; do
          [ $tgtid != $srcid ] || continue
          outimg="$outdir/$srcid-$tgtid.nii.gz"
          [ $force = true ] || [ ! -f "$outimg" ] || continue
          cat >> "$jobdsc" <<EOF_JOB
arguments = "-flo '$imgdir/$imgpre$srcid$imgsuf' -res '$outimg' -ref '$imgdir/$imgpre$tgtid$imgsuf' -cpp '$dofdir/$tgtid-$srcid$dofsuf' $interp ${args[@]}"
error     = $logdir/$srcid-$tgtid.err
output    = $logdir/$srcid-$tgtid.out
log       = $logdir/$srcid-$tgtid.log
queue

EOF_JOB
        done; done
      else
        echo "Exists: $jobdsc"
      fi
    done
  done

fi
