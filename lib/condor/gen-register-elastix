#!/bin/bash

## Generate HTCondor job description file for 'elastix' command

print_help()
{
  error "usage: $(basename $BASH_SOURCE) <dataset> <regid> [<cfgid>...]"
}

# load settings and auxiliary functions
. "$(dirname "$BASH_SOURCE")/../../etc/settings.sh" || exit 1
[ -n "$topdir" ] || error "etc/settings.sh: topdir not set"
[ -n "$etcdir" ] || error "etc/settings.sh: etcdir not set"
[ -n "$setdir" ] || error "etc/settings.sh: setdir not set"
[ -n "$cfgdir" ] || error "etc/settings.sh: cfgdir not set"
[ -n "$vardir" ] || error "etc/settings.sh: vardir not set"
[ -n "$elastix" ] || error "etc/settings.sh: elastix installation prefix not set"

# change to top-level directory
run cd "$topdir"

# evaluation dataset
dataset="$1"; shift
[ -n "$dataset" ] || print_help
. "$setdir/$dataset.sh" || exit 1
[ ${#chns[@]}   -eq 1 ] || error "$setdir/$dataset.sh: chns must be array of length 1"
[ ${#imgids[@]} -gt 0 ] || error "$setdir/$dataset.sh: imgids not set"
[ ${#tgtids[@]} -gt 0 ] || tgtids=("${imgids[@]}")
[ ${#srcids[@]} -gt 0 ] || srcids=("${imgids[@]}")

# images that drive the registration
chn="${chns[0]}"
bgvalue="$(get_bgvalue "$chn")"

# registration method
regid="$1"; shift
[ -n "$regid" ] || print_help
issym="$(is_sym $regid)"

# IDs of parameter sets
cfgids=("$@")
[ ${#cfgids} -gt 0 ] || cfgids=($(get_cfgids "$regid"))
[ ${#cfgids} -gt 0 ] || error "etc/settings.sh: get_cfgids is empty for $regid"

# affinely pre-aligned images
mskdir="$vardir/$dataset/affine/msk"
imgdir="$vardir/$dataset/affine/out"
imgpre="$chn/"
imgsuf=".nii.gz"

# create foreground masks
if [ -n "$bgvalue" ]; then
  makedir "$mskdir"
  for imgid in "${imgids[@]}"; do
    mskimg="$mskdir/$imgid$imgsuf"
    [ ! -f "$mskimg" ] || continue
    run "$mirtk" calculate-element-wise "$imgdir/$imgpre$imgid$imgsuf" -mask "$bgvalue" -set 1 -pad 0 -o "$mskimg" binary
  done
fi

# generate job description for each configuration
regcsv="$cfgdir/$regid.csv"
regdir="$vardir/$dataset/$regid"
paropt=($(head -n1 "$regcsv" | tr , '\n'))
config="$(cat "$cfgdir/$regid.txt")"

for cfgid in "${cfgids[@]}"; do
  jobdir="$regdir/$cfgid/bin"
  jobdsc="$jobdir/register.condor"
  if [ $update = true ] || [ ! -f "$jobdsc" ]; then
    echo "Update: $jobdsc"

    # paths
    dofdir="$regdir/$cfgid/dof"
    logdir="$regdir/$cfgid/log/register"
    pardir="$regdir/$cfgid/etc"

    # extract parameter values from CSV file
    if [ ${BASH_VERSION/.*} -lt 4 ]; then
      parval=()
      while IFS='\n' read line; do
        parval=("${parval[@]}" "$line")
      done < <(egrep "^$cfgid," "$regcsv" | tr , '\n')
    else
      readarray -t parval < <(egrep "^$cfgid," "$regcsv" | tr , '\n')
    fi
    [ -n "$parval" ] || error "$regcsv: Missing row '$cfgid,...'"
    [ ${#parval[@]} -eq ${#paropt[@]} ] || error "$regcsv: Expected ${#paropt[@]} columns for cfgid=$cfgid, got ${#parval[@]}"

    # substitute values in template configuration
    c=0
    if [ -n "$bgvalue" ]; then
      usemsk=true
    else
      usemsk=false
    fi
    parcfg="${config}"
    while [ $c -lt ${#paropt[@]} ]; do
      if [ "${paropt[c]}" = 'usemsk' ]; then
        usemsk=${parval[c]}
      elif [ -n "${paropt[c]}" ]; then
        parcfg="${parcfg//<${paropt[c]}>/${parval[c]}}"
      fi
      let c++
    done
    if [ -n "$bgvalue" ]; then
      parcfg="${parcfg/<bg>/$bgvalue}"
    else
      parcfg="${parcfg/<bg>/0}"
    fi

    # make directories
    makedir "$pardir"
    makedir "$dofdir"
    makedir "$logdir"
    makedir "$jobdir"

    # write configuration to file
    regcfg="$pardir/register.txt"
    echo -e "$parcfg" > "$regcfg"

    # write job description
    cat > "$jobdsc" <<EOF_HEADER
universe     = vanilla
executable   = $topdir/$libdir/tools/run-elastix
requirements = $condor_requirements
environment  = "$condor_environment"
getenv       = $condor_getenv
initialdir   = $topdir

EOF_HEADER
    for tgtid in "${tgtids[@]}"; do
    for srcid in "${srcids[@]}"; do
      dofout="$dofdir/$tgtid-$srcid.dof.gz"
      [ $force = true ] || [ ! -f "$dofout" ] || continue
      [ $allsym = true ] || [ $issym != true ] || [[ $tgtid < $srcid ]] || [ $tgtid = $srcid ] || continue
      args=()
      if [ "$usemsk" = true ]; then
        args=("${args[@]}" -fMask "'$mskdir/$tgtid$imgsuf'" -mMask "'$mskdir/$srcid$imgsuf'")
      fi
      cat >> "$jobdsc" <<EOF_QUEUE
arguments = "-f '$imgdir/$imgpre$tgtid$imgsuf' -m '$imgdir/$imgpre$srcid$imgsuf' -p '$regcfg' -o '$dofout' ${args[@]}"
error     = $logdir/$tgtid-$srcid.err
output    = $logdir/$tgtid-$srcid.out
log       = $logdir/$tgtid-$srcid.log
queue

EOF_QUEUE
    done; done
  else
    echo "Exists: $jobdsc"
  fi
done
