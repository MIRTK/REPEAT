#!/bin/bash

## Generate HTCondor job description file for 'elastix' command

print_help()
{
  echo "usage: $(basename $BASH_SOURCE) <dataset> <regid> [<cfgid>...]" 1>&2
  exit 1
}

# arguments
dataset="$1"; shift
regid="$1"; shift

[ -n "$dataset" -a -n "$regid" ] || print_help

# load settings and auxiliary functions
. "$(dirname "$BASH_SOURCE")/../../etc/settings.sh" || exit 1
[ -n "$topdir" ] || error "etc/settings.sh: topdir not set"
[ -n "$etcdir" ] || error "etc/settings.sh: etcdir not set"
[ -n "$setdir" ] || error "etc/settings.sh: setdir not set"
[ -n "$cfgdir" ] || error "etc/settings.sh: cfgdir not set"
[ -n "$vardir" ] || error "etc/settings.sh: vardir not set"
[ -n "$elastix" ] || error "etc/settings.sh: elastix installation prefix not set"

# change to top-level directory
run cd "$topdir"

# evaluation dataset
. "$setdir/$dataset.sh" || exit 1
[ ${#chns[@]}   -eq 1 ] || error "$setdir/$dataset.sh: chns must be array of length 1"
[ ${#imgids[@]} -gt 0 ] || error "$setdir/$dataset.sh: imgids not set"
[ ${#tgtids[@]} -gt 0 ] || tgtids=("${imgids[@]}")
[ ${#srcids[@]} -gt 0 ] || srcids=("${imgids[@]}")

# images that drive the registration
chn="${chns[0]}"

# registration method
issym="$(is_sym $regid)"

# affinely pre-aligned images
imgdir="$vardir/$dataset/affine/crp"
imgpre="$chn/"
imgsuf=".nii.gz"

# create/choose foreground masks and cropped images
bgvalue="$(get_bgvalue "$chn")"
bgmask=false
if [ -n "$bgvalue" ]; then
  if [ "$(is_mask "$bgvalue")" = true ]; then
    imgdir="$vardir/$dataset/affine/crp"
    mskdir="$vardir/$dataset/affine/crp/$bgvalue"
    bgmask=true
  else
    mskdir="$vardir/$dataset/affine/crp/$chn-msk"
    makedir "$mskdir"
    for imgid in "${imgids[@]}"; do
      mskimg="$mskdir/$imgid$imgsuf"
      [ ! -f "$mskimg" ] || continue
      run "$mirtk" calculate-element-wise "$imgdir/$imgpre$imgid$imgsuf" -mask "$bgvalue" -set 1 -pad 0 -o "$mskimg" binary
    done
  fi
else
  mskdir=''
fi

# padding value for <bg> in config template
padvalue="$(get_padvalue "$chn")"
[ -n "$padvalue" ] || padvalue=0

if [ -n "$condor_requirements" ]; then
  condor_requirements="$condor_requirements && "
fi
if [ -n "$threads" -a $threads -ge 0 ]; then
  [ $threads -gt 0 ] || threads=1
  condor_requirements="${condor_requirements}Cpus==$threads"
fi

# dataset and registration specific parameters
if [ -f "$cfgdir/$dataset/$regid.csv" ]; then
  regcsv="$cfgdir/$dataset/$regid.csv"
  config="$(cat "$cfgdir/$dataset/$regid.txt")"
  [ -n "$config" ] || error "Missing configuration template file: $cfgdir/$dataset/$regid.txt"
elif [ -f "$cfgdir/$dataset/$regid.txt" ]; then
  regcsv=''
  config="$cfgdir/$dataset/$regid.txt"
elif [ -f "$cfgdir/$regid.csv" ]; then
  regcsv="$cfgdir/$regid.csv"
  config="$(cat "$cfgdir/$regid.txt")"
  [ -n "$config" ] || error "Missing configuration template file: $cfgdir/$regid.txt"
elif [ -f "$cfgdir/$regid.txt" ]; then
  regcsv=''
  config="$cfgdir/$regid.txt"
else
  error "Missing $regid.csv parameters file in $cfgdir[/$dataset]"
fi
if [ -n "$regcsv" ]; then
  paropt=($(head -n1 "$regcsv" | tr , '\n'))
else
  paropt=()
fi

# IDs of parameter sets
cfgids=("$@")
[ ${#cfgids} -gt 0 ] || cfgids=($(get_cfgids "$dataset" "$regid"))
if [ ${#cfgids} -eq 0 ]; then
  if [ -n "$regcsv" ]; then
    error "etc/settings.sh: get_cfgids is empty for $regid"
  fi
  cfgids=('')
fi

# generate job description for each configuration
regdir="$vardir/$dataset/$regid"

for cfgid in "${cfgids[@]}"; do
  if [ -n "$cfgid" ]; then
    jobdir="$regdir/$cfgid/bin"
  else
    jobdir="$regdir/bin"
  fi
  jobdsc="$jobdir/register.condor"
  if [ $update = true ] || [ ! -f "$jobdsc" ]; then
    echo "Update: $jobdsc"

    # paths
    if [ -n "$cfgid" ]; then
      dofdir="$regdir/$cfgid/dof"
      logdir="$regdir/$cfgid/log/register"
      pardir="$regdir/$cfgid/etc"
    else
      dofdir="$regdir/dof"
      logdir="$regdir/log/register"
      pardir="$regdir/etc"
    fi

    # extract parameter values from CSV file
    if [ -n "$regcsv" ]; then
      if [ ${BASH_VERSION/.*} -lt 4 ]; then
        parval=()
        while IFS='\n' read line; do
          parval=("${parval[@]}" "$line")
        done < <(egrep "^$cfgid," "$regcsv" | tr , '\n')
      else
        readarray -t parval < <(egrep "^$cfgid," "$regcsv" | tr , '\n')
      fi
      [ -n "$parval" ] || error "$regcsv: Missing row '$cfgid,...'"
      [ ${#parval[@]} -eq ${#paropt[@]} ] || error "$regcsv: Expected ${#paropt[@]} columns for cfgid=$cfgid, got ${#parval[@]}"

      # substitute values in template configuration
      c=0
      if [ -n "$mskdir" ]; then
        usemsk=true
      else
        usemsk=false
      fi
      srcmsk=false
      parcfg="${config}"
      while [ $c -lt ${#paropt[@]} ]; do
        if [ "${paropt[c]}" = 'usemsk' ]; then
          usemsk=${parval[c]}
        elif [ "${paropt[c]}" = 'srcmsk' ]; then
          srcmsk=${parval[c]}
        elif [ -n "${paropt[c]}" ]; then
          parcfg="${parcfg//<${paropt[c]}>/${parval[c]}}"
        fi
        let c++
      done
      parcfg="${parcfg/<bg>/$padvalue}"

      # write configuration to file
      makedir "$pardir"
      regcfg="$pardir/register.txt"
      echo -e "$parcfg" > "$regcfg"
    else
      # use preset configuration file
      usemsk=true
      srcmsk=true
      regcfg="$config"
    fi

    # make directories
    makedir "$dofdir"
    makedir "$logdir"
    makedir "$jobdir"

    # write job description
    cat > "$jobdsc" <<EOF_HEADER
universe     = vanilla
executable   = $topdir/$libdir/tools/run-elastix
requirements = $condor_requirements
environment  = "$condor_environment"
getenv       = $condor_getenv
initialdir   = $topdir

EOF_HEADER
    for tgtid in "${tgtids[@]}"; do
    for srcid in "${srcids[@]}"; do
      [ $tgtid != $srcid ] || continue
      dofout="$dofdir/$tgtid-$srcid.dof.gz"
      [ $force = true ] || [ ! -f "$dofout" ] || continue
      [ $allsym = true ] || [ $issym != true ] || [[ $tgtid < $srcid ]] || continue
      args=()
      if [ "$usemsk" = true ]; then
        args=("${args[@]}" -fMask "'$mskdir/$tgtid$imgsuf'")
        # Stefan Klein suggests not to use a source image mask:
        # http://lists.bigr.nl/pipermail/elastix/2014-February/001370.html
        if [ "$srcmsk" = true ]; then
          args=("${args[@]}" -mMask "'$mskdir/$srcid$imgsuf'")
        fi
      fi
      cat >> "$jobdsc" <<EOF_QUEUE
arguments = "-f '$imgdir/$imgpre$tgtid$imgsuf' -m '$imgdir/$imgpre$srcid$imgsuf' -p '$regcfg' -o '$dofout' ${args[@]}"
error     = $logdir/$tgtid-$srcid.err
output    = $logdir/$tgtid-$srcid.out
log       = $logdir/$tgtid-$srcid.log
queue

EOF_QUEUE
    done; done
  else
    echo "Exists: $jobdsc"
  fi
done
