#!/bin/bash

## Generate HTCondor job description file to evaluate quality measures

print_help()
{
  echo "usage: $(basename $BASH_SOURCE) <dataset> <regid> [<cfgid>...]" 1>&2
  exit 1
}

# arguments
dataset="$1"; shift
regid="$1"; shift

[ -n "$dataset" -a -n "$regid" ] || print_help

# load settings and auxiliary functions
. "$(dirname "$BASH_SOURCE")/../../etc/settings.sh" || exit 1
[ -n "$topdir" ] || error "etc/settings.sh: topdir not set"
[ -n "$etcdir" ] || error "etc/settings.sh: etcdir not set"
[ -n "$setdir" ] || error "etc/settings.sh: setdir not set"
[ -n "$vardir" ] || error "etc/settings.sh: vardir not set"
[ -n "$csvdir" ] || error "etc/settings.sh: csvdir not set"
[ -n "$mirtk"  ] || error "etc/settings.sh: mirtk not set"
[ ${mirtk:0:1} = / ] || mirtk="$topdir/$mirtk"

# change to top-level directory
run cd "$topdir"

# evaluation dataset
. "$setdir/$dataset.sh" || exit 1
[ ${#mods[@]}   -gt 0 ] || error "$setdir/$dataset.sh: mods not set"
[ ${#imgids[@]} -gt 0 ] || error "$setdir/$dataset.sh: imgids not set"

# registration method
issym="$(is_sym $regid)"

if [ $evlice = true ]; then
  if [ ${#tgtids[@]} -ne ${#srcids[@]} ]; then
    echo "Info: Skipping evaluation of inverse consistency error because not all srcimgs are used as tgtimgs."
  elif [ $issym = true -a $allsym != true ]; then
    echo "Info: Skipping evaluation of inverse consistency error because allsym not 'true'."
  fi
  evlice=false
fi
if [ $evlmte = true -a ${#tgtids[@]} -ne ${#srcids[@]} ]; then
  echo "Info: Skipping evaluation of mean transitivity error because not all srcimgs are used as tgtimgs."
  evlmte=false
fi

# reference image used as evaluate-dof -target
refdir="$imgdir"
if [ -z "$refmod" ]; then
  for mod in "${mods[@]}"; do
    if [ $(is_seg "$mod") != true -a $(is_prob "$mod") != true ]; then
      refmod="$mod"
      break
    fi
  done
fi
refpre="$(get_prefix "$refmod")"
refsuf="$(get_suffix "$refmod")"
[ -n "$refsuf" ] || refsuf=".nii.gz"

# evaluate-dof '-padding <bgvalue>' or empty string
refpad=''
refbgv=$(get_bgvalue "$refmod")
if [ -n "$refbgv" -a "$(is_mask "$refbgv")" != true ]; then
  refpad="-padding $refbgv"
fi

# ------------------------------------------------------------------------------
# evaluate quality measures after affine pre-alignment
if [ "$regid" = 'affine' ]; then

  cfgids=('')
  tgtids=("${imgids[@]}")
  srcids=("${imgids[@]}")
  evljac=false
  evlice=false
  evlmte=false

# ------------------------------------------------------------------------------
# evaluate quality measures of pairwise registration output
else

  cfgids=("$@")
  [ ${#cfgids}    -gt 0 ] || cfgids=($(get_cfgids "$dataset" "$regid"))
  [ ${#cfgids}    -gt 0 ] || error "etc/settings.sh: get_cfgids is empty for $regid"
  [ ${#tgtids[@]} -gt 0 ] || tgtids=("${imgids[@]}")
  [ ${#srcids[@]} -gt 0 ] || srcids=("${imgids[@]}")

fi

# ------------------------------------------------------------------------------
# for each configuration... (single iteration for regid='affine')
for cfgid in "${cfgids[@]}"; do

  regdir="$vardir/$dataset/$regid"
  [ -z "$cfgid" ] || regdir="$regdir/$cfgid"

  dofdir="$regdir/dof"
  imgdir="$regdir/out"
  jobdir="$regdir/bin"
  pardir="$regdir/etc"

  makedir "$jobdir"

  # --------------------------------------------------------------------------
  # evaluate Jacobian determinants
  #
  # Example: https://github.com/ntustison/BSplineMorphisms/blob/Results/logJacobianMeasuresMALTemplate.csv
  #          (last checked commit SHA: a5591cc24fa37ecc07dc6e972d4f8c567294b498)
  if [ "$evljac" = true ]; then

    measure="jac"
    outdir="$regdir/evl/dof/$measure"
    logdir="$regdir/log/evaluate-dof-$measure"

    makedir "$outdir"
    makedir "$logdir"

    jobdsc="$jobdir/evaluate-dof-$measure.condor"
    if [ $update = true ] || [ ! -f "$jobdsc" ]; then
      echo "Update: $jobdsc"
      cat > "$jobdsc" <<EOF_HEADER
universe   = vanilla
executable = $mirtk
initialdir = $topdir

EOF_HEADER
      for tgtid in "${tgtids[@]}"; do  
      for srcid in "${srcids[@]}"; do
        [ $srcid != $tgtid ] || continue
        outimg="$outdir/$tgtid-$srcid.nii.gz"
        [ $force = true ] || [ ! -f "$outimg" ] || continue
        cat >> "$jobdsc" <<EOF_JOB
arguments = "evaluate-jacobian '$refdir/$refpre$tgtid$refsuf' '$outimg' '$dofdir/$tgtid-$srcid.dof.gz' $refpad -outside NaN -float -v -threads $threads"
error     = $logdir/$tgtid-$srcid.err
output    = $logdir/$tgtid-$srcid.out
log       = $logdir/$tgtid-$srcid.log
queue

EOF_JOB
      done; done
    else
      echo "Exists: $jobdsc"
    fi

  fi

  # --------------------------------------------------------------------------
  # evaluate inverse consistency error
  if [ "$evlice" = true ]; then

    measure="mice"
    outdir="$regdir/evl/dof/$measure"
    logdir="$regdir/log/evaluate-dof-$measure"

    makedir "$outdir"
    makedir "$logdir"
    makedir "$pardir"

    jobdsc="$jobdir/evaluate-dof-$measure.condor"
    if [ $update = true ] || [ ! -f "$jobdsc" ]; then
      echo "Update: $jobdsc"
      cat > "$jobdsc" <<EOF_HEADER
universe   = vanilla
executable = $mirtk
initialdir = $topdir

EOF_HEADER
      for tgtid in "${tgtids[@]}"; do
        outimg="$outdir/$tgtid.nii.gz"
        [ $force = true ] || [ ! -f "$outimg" ] || continue
        dofs="../dof"
        for srcid in "${srcids[@]}"; do
          [ $srcid != $tgtid ] || continue
          dofs="${dofs}\n\n$tgtid-$srcid.dof.gz\n$srcid-$tgtid.dof.gz"
        done
        echo -e "$dofs" > "$pardir/dofs-ic-$tgtid.txt"
        cat >> "$jobdsc" <<EOF_JOB
arguments = "evaluate-dof -squared -$measure -dofs '$pardir/dofs-ic-$tgtid.txt' -target '$refdir/$refpre$tgtid$refsuf' $refpad -output '$outimg' -threads $threads"
error     = $logdir/$tgtid.err
output    = $logdir/$tgtid.out
log       = $logdir/$tgtid.log
queue

EOF_JOB
      done
    else
      echo "Exists: $jobdsc"
    fi
  fi

  # --------------------------------------------------------------------------
  # evaluate transitivity error
  if [ "$evlmte" = true ]; then

    measure="mte"
    outdir="$regdir/evl/dof/$measure"
    logdir="$regdir/log/evaluate-dof-$measure"

    makedir "$outdir"
    makedir "$logdir"
    makedir "$pardir"

    jobdsc="$jobdir/evaluate-dof-$measure.condor"
    if [ $update = true ] || [ ! -f "$jobdsc" ]; then
      echo "Update: $jobdsc"
      cat > "$jobdsc" <<EOF_HEADER
universe   = vanilla
executable = $mirtk
initialdir = $topdir

EOF_HEADER
      for tgtid in "${tgtids[@]}"; do
        outimg="$outdir/$tgtid.nii.gz"
        [ $force = true ] || [ ! -f "$outimg" ] || continue
        dofs="../dof"
        for srcid1 in "${srcids[@]}"; do
          [ $srcid1 != $tgtid ] || continue
          for srcid2 in "${srcids[@]}"; do
            [ $srcid2 != $srcid1 -a $srcid2 != $tgtid ] || continue
            dofs="${dofs}\n\n$tgtid-$srcid1.dof.gz\n$srcid1-$srcid2.dof.gz\n$srcid2-$tgtid.dof.gz"
          done
        done
        echo -e "$dofs" > "$pardir/dofs-te-$tgtid.txt"
        cat >> "$jobdsc" <<EOF_JOB
arguments = "evaluate-dof -squared -$measure -dofs '$pardir/dofs-te-$tgtid.txt' -target '$refdir/$refpre$tgtid$refsuf' $refpad -output '$outimg' -threads $threads"
error     = $logdir/$tgtid.err
output    = $logdir/$tgtid.out
log       = $logdir/$tgtid.log
queue

EOF_JOB
      done
    else
      echo "Exists: $jobdsc"
    fi
  fi

  # --------------------------------------------------------------------------
  # evaluate quantitative measures for each modality/channel/contrast
  for mod in "${mods[@]}"; do

    imgpre="$mod/"
    imgsuf=".nii.gz"

    if [ $(is_seg "$mod") = true ]; then
      kind="-labels"
    elif [ $(is_prob "$mod") = true ]; then
      kind="-probs"
    else
      kind=""
    fi

    for measure in $(get_measures "$mod"); do

      logdir="$regdir/log/evaluate-$mod-$measure"
      makedir "$logdir"

      jobdsc="$jobdir/evaluate-$mod-$measure.condor"
      if [ $update = true ] || [ ! -f "$jobdsc" ]; then
        echo "Update: $jobdsc"

        # ----------------------------------------------------------------------
        # evaluate segmentation overlap
        [ $measure != 'overlap' ] || measure='dsc'
        if [ $(is_overlap_measure $measure) = true ]; then

          if [ -z "$kind" ]; then
            error "Cannot evaluate $measure of $mod image! Modify is_seg()/is_prob() if needed."
          fi

          outdir="$csvdir/$dataset/$regid"
          [ -z "$cfgid" ] || outdir="$outdir/$cfgid"
          makedir "$outdir"

          cat > "$jobdsc" <<EOF_HEADER
universe   = vanilla
executable = $mirtk
initialdir = $topdir

EOF_HEADER
          for tgtid in "${tgtids[@]}"; do
            outcsv="$outdir/$tgtid-$measure.csv"
            [ $force = true ] || [ ! -f "$outcsv" ] || continue
            srcimgs=()
            if [ $regid = 'affine' ]; then
              tgtimg="$imgdir/$imgpre$tgtid$imgsuf"
              for srcid in "${srcids[@]}"; do
                srcimgs=("${srcimgs[@]}" "'$imgdir/$imgpre$srcid$imgsuf'")
              done
            else
              tgtimg="$imgdir/$imgpre$tgtid-$tgtid$imgsuf"
              for srcid in "${srcids[@]}"; do
                srcimgs=("${srcimgs[@]}" "'$imgdir/$imgpre$srcid-$tgtid$imgsuf'")
              done
            fi
            cat >> "$jobdsc" <<EOF_JOB
arguments = "evaluate-overlap '$tgtimg' ${srcimgs[@]} $kind -metric $measure -precision 5 -table -header -id srcid -threads $threads"
error     = $logdir/$tgtid.err
output    = $outcsv
log       = $logdir/$tgtid.log
queue

EOF_JOB
          done

        # ----------------------------------------------------------------------
        # evaluate voxel-wise measures
        else

          cat > "$jobdsc" <<EOF_HEADER
universe   = vanilla
executable = $mirtk
initialdir = $topdir

EOF_HEADER

          padding=''
          normalization=''
          rescaling=''

          isseg=$(is_seg "$mod")
          if [ "$isseg" != true ]; then
            normalization='-normalize zscore'
            bgvalue=$(get_bgvalue "$mod")
            if [ -n "$bgvalue" -a $(is_mask "$bgvalue") != true ]; then
              padding="-padding $bgvalue"
              let min="$bgvalue+1"
              let max="$bgvalue+100"
              rescaling="-rescale $min $max"
            else
              rescaling="-rescale 0 100"
            fi
          fi

          if [ $regid = 'affine' ]; then

            outdir="$regdir/evl/$mod"
            outimg="$outdir/$measure.nii.gz"

            makedir "$outdir"

            for imgid in "${imgids[@]}"; do
              images=("${images[@]}" "'$imgdir/$imgpre$imgid$imgsuf'")
            done
            cat >> "$jobdsc" <<EOF_JOB
arguments = "aggregate-images $measure ${images[@]} -output '$outimg' -bins 0 $normalization $rescaling $padding -threads $threads"
error     = $logdir/$measure.err
output    = $logdir/$measure.out
log       = $logdir/$measure.log
queue

EOF_JOB
          else

            outdir="$regdir/evl/$mod/$measure"
            makedir "$outdir"

            for tgtid in "${tgtids[@]}"; do
              outimg="$outdir/$tgtid.nii.gz"
              [ $force = true ] || [ ! -f "$outimg" ] || continue
              images=()
              for srcid in "${srcids[@]}"; do
                images=("${images[@]}" "'$imgdir/$imgpre$srcid-$tgtid$imgsuf'")
              done
              cat >> "$jobdsc" <<EOF_JOB
arguments = "aggregate-images $measure ${images[@]} -output '$outimg' -bins 0 $normalization $rescaling $padding -threads $threads"
error     = $logdir/$tgtid.err
output    = $logdir/$tgtid.out
log       = $logdir/$tgtid.log
queue

EOF_JOB
            done
          fi
        fi
      else
        echo "Exists: $jobdsc"
      fi
    done
  done
done
